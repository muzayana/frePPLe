<?xml version="1.0" encoding="UTF-8" ?>
<plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <name>Test model for alternate flows</name>
  <description>
  This test verifies the behavior of the user exit that controls alternate flows.
  The user exit gives the user control over the allowed combinations of alternate flows.

  In this example, a product uses 3 components, each having some alternates.
     - component A1, with alternates A2 and A3
     - component B1, with alternates B2, B3 and B4
     - component C1, with alternates C2, C3 and C4

  This gives a total of 3*4*4 = 48 possible combinations of the components.
  Using the user exit we restrict the allowed combinations to the following:
     - A1, B2, C1
     - A1, B2, C2
     - A2, B1, C2
     - A2, B1, C3
     - A3, B3, C4
     - A3, B4, C4
  These restrictions can represent technical constraints in the bill of material
  (as provided by the engineers), different versions in the bill of material,
  configuration rules imposed by the customer, etc...
  </description>
  <current>2009-01-01T00:00:00</current>
  <buffers>
    <buffer name="A1" xsi:type="buffer_procure">
      <item name="A1" />
	    <onhand>0</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="A2" xsi:type="buffer_procure">
      <item name="A2" />
	    <onhand>0</onhand>
	    <leadtime>P5D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="A3" xsi:type="buffer_procure">
      <item name="A3" />
	    <onhand>10</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="B1" xsi:type="buffer_procure">
      <item name="B1" />
	    <onhand>0</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="B2" xsi:type="buffer_procure">
      <item name="B2" />
	    <onhand>0</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="B3" xsi:type="buffer_procure">
      <item name="B3" />
	    <onhand>5</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="B4" xsi:type="buffer_procure">
      <item name="B4" />
	    <onhand>5</onhand>
	    <leadtime>P5D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="C1" xsi:type="buffer_procure">
      <item name="C1" />
	    <onhand>0</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="C2" xsi:type="buffer_procure">
      <item name="C2" />
	    <onhand>10</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="C3" xsi:type="buffer_procure">
      <item name="C3" />
	    <onhand>5</onhand>
	    <leadtime>P7D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="C4" xsi:type="buffer_procure">
      <item name="C4" />
	    <onhand>5</onhand>
	    <leadtime>P10D</leadtime>
	    <mininventory>20</mininventory>
	    <maxinventory>70</maxinventory>
    </buffer>
    <buffer name="product">
      <item name="product" />
      <producing name="assembly" xsi:type="operation_fixed_time" duration="P1D">
        <flows>
          <flow xsi:type="flow_end">
            <buffer name="product" />
            <quantity>1</quantity>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="A1" />
            <quantity>-1</quantity>
            <priority>1</priority>
            <name>groupA</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="A2" />
            <quantity>-1</quantity>
            <priority>2</priority>
            <name>groupA</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="A3" />
            <quantity>-1</quantity>
            <priority>3</priority>
            <name>groupA</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="B1" />
            <quantity>-1</quantity>
            <priority>1</priority>
            <name>groupB</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="B2" />
            <quantity>-1</quantity>
            <priority>2</priority>
            <name>groupB</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="B3" />
            <quantity>-1</quantity>
            <priority>3</priority>
            <name>groupB</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="B4" />
            <quantity>-1</quantity>
            <priority>4</priority>
            <name>groupB</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="C1" />
            <quantity>-1</quantity>
            <priority>1</priority>
            <name>groupC</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="C2" />
            <quantity>-1</quantity>
            <priority>2</priority>
            <name>groupC</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="C3" />
            <quantity>-1</quantity>
            <priority>3</priority>
            <name>groupC</name>
          </flow>
          <flow xsi:type="flow_start">
            <buffer name="C4" />
            <quantity>-1</quantity>
            <priority>4</priority>
            <name>groupC</name>
          </flow>
        </flows>
      </producing>
    </buffer>
  </buffers>
  <items>
    <item name="product">
      <operation name="deliver product">
        <flows>
          <flow xsi:type="flow_start">
            <buffer name="product" />
            <quantity>-1</quantity>
          </flow>
        </flows>
      </operation>
    </item>
  </items>
  <demands>
    <demand name="order 1">
      <quantity>10</quantity>
      <due>2009-01-04T00:00:00</due>
      <priority>11</priority>
      <item name="product" />
      <maxlateness>P0D</maxlateness>
    </demand>
    <!--
    <demand name="order 2">
      <quantity>10</quantity>
      <due>2009-02-02T00:00:00</due>
      <priority>12</priority>
      <item name="product" />
    </demand>
    <demand name="order 3">
      <quantity>10</quantity>
      <due>2009-02-20T00:00:00</due>
      <priority>13</priority>
      <item name="product" />
    </demand>
    -->
  </demands>

<?python
allowed = [
  ['A1', 'B2', 'C1'],
  ['A1', 'B2', 'C2'],
  ['A2', 'B1', 'C2'],
  ['A2', 'B1', 'C3'],
  ['A3', 'B3', 'C4'],
  ['A3', 'B4', 'C4'],
  ]

# This function is called by the solver to verify whether a certain alternate
# flow is acceptable or not.
def checkAlternate(flowplan,mode):
  # The value of global variables is shared across calls to this function.
  global allowed
  # Debugging print statements
  print("Validating combination", end="")
  for fp in flowplan.operationplan.flowplans:
    if fp.quantity > 0: continue
    print(fp.buffer.item.name, end="")
    if fp == flowplan: break
  print(":", end="")
  # Loop through all allowed combinations, and check whether they match the
  # currently selected part combination
  for combination in allowed:
    ok = True
    # Check whether all currently selected parts are part of this combination
    for fp in flowplan.operationplan.flowplans:
      if fp.quantity > 0: continue
      if fp.buffer.item.name not in combination:
        # Current parts don't match this combination
        ok = False
        break
      if fp == flowplan: break
    if ok:
      # All current parts match
      print("yes")
      return True
  print("no")
  return False

print("CREATING CONSTRAINED PLAN")
sol = frepple.solver_mrp(constraints=15, loglevel=2, userexit_flow=checkAlternate)
sol.solve()
frepple.saveplan("output.1.xml")
print("CREATING UNCONSTRAINED PLAN")
sol.plantype = 2
sol.solve()
frepple.saveplan("output.2.xml")
?>

</plan>
