<?xml version="1.0" encoding="UTF-8" ?>
<plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<?python
# Loading modules is typically done in the init.py or init.xml file
# that are automatically executed upon startup.
# But it can happen at any time before the module is actually used.
frepple.loadmodule("mod_sample.so")
?>

  <name>Sample Module</name>
  <current>2009-01-01T00:00:00</current>
  <calendars>
    <calendar name="capacity factory 1">
      <buckets>
        <bucket start="2009-01-01T00:00:00">
          <value>1</value>
        </bucket>
      </buckets>
    </calendar>
    <calendar name="capacity factory 2">
      <buckets>
        <bucket start="2009-01-01T00:00:00">
          <value>1</value>
        </bucket>
      </buckets>
    </calendar>
  </calendars>
  <operations>
    <operation name="supply distribution centre" xsi:type="operation_alternate">
      <suboperations>
        <suboperation>
          <operation name="transport supply from factory 1"
          	xsi:type="operation_transport">
            <duration>P1D</duration>
            <frombuffer name="product in factory 1"/>
            <tobuffer name="product in distribution centre"/>
          </operation>
          <priority>1</priority>
        </suboperation>
        <suboperation>
          <operation name="transport supply from factory 2"
          	xsi:type="operation_transport">
            <duration>P1D</duration>
            <frombuffer name="product in factory 2"/>
            <tobuffer name="product in distribution centre"/>
          </operation>
          <priority>2</priority>
        </suboperation>
      </suboperations>
    </operation>
  </operations>
  <locations>
    <location name="distribution centre"/>
    <location name="factory 1"/>
    <location name="factory 2"/>
  </locations>
  <items>
    <item name="product"/>
  </items>
  <buffers>
    <buffer name="product in factory 1">
      <location name="factory 1" />
      <item name="product" />
      <producing name="make product in factory 1"
        xsi:type="operation_fixed_time" duration="P1D">
	      <loads>
          <load>
            <resource name="capacity of factory 1">
              <maximum_calendar name="capacity factory 1" />
            </resource>
          </load>
        </loads>
        <flows>
          <flow xsi:type="flow_end">
            <buffer name="product in factory 1" />
            <quantity>1</quantity>
          </flow>
        </flows>
      </producing>
    </buffer>
    <buffer name="product in factory 2">
      <location name="factory 2" />
      <item name="product" />
      <producing name="make product in factory 2"
        xsi:type="operation_fixed_time" duration="P1D">
  	    <loads>
          <load>
            <resource name="capacity of factory 2">
              <maximum_calendar name="capacity factory 2" />
            </resource>
          </load>
        </loads>
        <flows>
          <flow xsi:type="flow_end">
            <buffer name="product in factory 2" />
            <quantity>1</quantity>
          </flow>
        </flows>
      </producing>
    </buffer>
    <buffer name="product in distribution centre">
      <producing name="supply distribution centre" />
      <location name="distribution centre" />
      <item name="product" />
      <onhand>5</onhand>
    </buffer>
  </buffers>
  <demands>
    <demand name="order 1">
      <quantity>10</quantity>
      <due>2009-01-03T12:00:00</due>
      <priority>1</priority>
      <item name="product" />
      <operation name="delivery product from distribution centre">
        <flows>
          <flow xsi:type="flow_start">
            <buffer name="product in distribution centre" />
            <quantity>-1</quantity>
          </flow>
        </flows>
      </operation>
    </demand>
    <demand name="order 2">
      <quantity>10</quantity>
      <due>2009-01-03T12:00:00</due>
      <priority>2</priority>
      <item name="product" />
      <operation name="delivery product from distribution centre"/>
    </demand>
  </demands>

<?python
# Create a plan
frepple.solver_mrp(constraints=15, loglevel=0).solve()
frepple.saveXMLfile("output.1.xml")

# Testing Python binding
oper = frepple.operation(name="transport supply from factory 1")
print(oper, " - ", oper.frombuffer, " - ", oper.tobuffer)
oper = frepple.operation(name="transport supply from factory 2")
print(oper, " - ", oper.frombuffer, " - ", oper.tobuffer)
oper = frepple.operation_transport(name="transport from factories 1 to factory 2",
  frombuffer=frepple.buffer(name="product in factory 1"),
  tobuffer=frepple.buffer(name="product in factory 2"),
  duration=86400)
print(oper, " - ", oper.frombuffer, " - ", oper.tobuffer)

# Delete a buffer
# The transport operations using it will be deleted as well
frepple.buffer(name="product in distribution centre", action="R")
frepple.saveXMLfile("output.2.xml")

?>

</plan>
