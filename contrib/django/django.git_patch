commit 07c651804b6e559e52fecf69652ac3467a5cd926
Author: Johan De Taeye <jdetaeye@frepple.com>
Date:   Sat May 18 13:32:15 2013 +0200

    frePPLe's patch for django 1.5.1

diff --git a/django/conf/project_template/__init__.py b/django/conf/project_template/__init__.py
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/django/conf/project_template/__init__.py
@@ -0,0 +1 @@
+
diff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py
index 1e6277f..a2f7540 100644
--- a/django/contrib/admin/widgets.py
+++ b/django/contrib/admin/widgets.py
@@ -6,6 +6,7 @@ from __future__ import unicode_literals
 import copy
 
 from django import forms
+from django.db import DEFAULT_DB_ALIAS
 from django.contrib.admin.templatetags.admin_static import static
 from django.core.urlresolvers import reverse
 from django.forms.widgets import RadioFieldRenderer
@@ -16,6 +17,7 @@ from django.utils.translation import ugettext as _
 from django.utils.safestring import mark_safe
 from django.utils.encoding import force_text
 from django.utils import six
+from django.utils.http import urlquote
 
 
 class FilteredSelectMultiple(forms.SelectMultiple):
@@ -143,6 +145,10 @@ class ForeignKeyRawIdWidget(forms.TextInput):
         if attrs is None:
             attrs = {}
         extra = []
+        if self.db == DEFAULT_DB_ALIAS:
+          prefix = ''
+        else:
+          prefix = '/%s' % self.db
         if rel_to in self.admin_site._registry:
             # The related object is registered with the same AdminSite
             related_url = reverse('admin:%s_%s_changelist' %
@@ -159,13 +165,15 @@ class ForeignKeyRawIdWidget(forms.TextInput):
                 attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.
             # TODO: "lookup_id_" is hard-coded here. This should instead use
             # the correct API to determine the ID dynamically.
-            extra.append('<a href="%s%s" class="related-lookup" id="lookup_id_%s" onclick="return showRelatedObjectLookupPopup(this);"> '
-                            % (related_url, url, name))
+            extra.append('<a href="%s%s%s" class="related-lookup" id="lookup_id_%s" onclick="return showRelatedObjectLookupPopup(this);"> '
+                            % (prefix, related_url, url, name))
             extra.append('<img src="%s" width="16" height="16" alt="%s" /></a>'
                             % (static('admin/img/selector-search.gif'), _('Lookup')))
         output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra
         if value:
-            output.append(self.label_for_value(value))
+           # FREPPLE DOES NOT SHOW THE CURRENT VALUE, BUT ADDS AN EDIT LINK
+           #output.append(self.label_for_value(value))
+           output.append('<a href="%s%s%s/"> <img src="%s" width="16" height="16" alt="%s" /></a>' % (prefix, related_url, urlquote(value), static('admin/img/icon_changelink.gif'), _('Edit')))
         return mark_safe(''.join(output))
 
     def base_url_parameters(self):
diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index fab5059..fe73eef 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -4,6 +4,7 @@ import sys
 from optparse import OptionParser, NO_DEFAULT
 import imp
 import warnings
+from pkgutil import iter_modules
 
 from django.core.exceptions import ImproperlyConfigured
 from django.core.management.base import BaseCommand, CommandError, handle_default_options
@@ -19,54 +20,18 @@ from django import get_version
 # doesn't have to reload every time it's called.
 _commands = None
 
-def find_commands(management_dir):
+def find_commands(app_name):
     """
-    Given a path to a management directory, returns a list of all the command
-    names that are available.
+    Given an application name, returns a list of all the commands found.
 
-    Returns an empty list if no commands are defined.
+    Raises ImportError if no commands are defined.
     """
-    command_dir = os.path.join(management_dir, 'commands')
-    try:
-        return [f[:-3] for f in os.listdir(command_dir)
-                if not f.startswith('_') and f.endswith('.py')]
-    except OSError:
-        return []
-
-def find_management_module(app_name):
-    """
-    Determines the path to the management module for the given app_name,
-    without actually importing the application or the management module.
-
-    Raises ImportError if the management module cannot be found for any reason.
-    """
-    parts = app_name.split('.')
-    parts.append('management')
-    parts.reverse()
-    part = parts.pop()
-    path = None
-
-    # When using manage.py, the project module is added to the path,
-    # loaded, then removed from the path. This means that
-    # testproject.testapp.models can be loaded in future, even if
-    # testproject isn't in the path. When looking for the management
-    # module, we need look for the case where the project name is part
-    # of the app_name but the project directory itself isn't on the path.
-    try:
-        f, path, descr = imp.find_module(part, path)
-    except ImportError as e:
-        if os.path.basename(os.getcwd()) != part:
-            raise e
-    else:
-        if f:
-            f.close()
-
-    while parts:
-        part = parts.pop()
-        f, path, descr = imp.find_module(part, path and [path] or None)
-        if f:
-            f.close()
-    return path
+    packages = {}
+    mgmt_package = "%s.management.commands" % app_name
+    # The next line imports the *package*, not all modules in the package
+    __import__(mgmt_package)
+    path = getattr(sys.modules[mgmt_package], '__path__', None)
+    return [i[1] for i in iter_modules(path)]
 
 def load_command_class(app_name, name):
     """
@@ -101,7 +66,7 @@ def get_commands():
     """
     global _commands
     if _commands is None:
-        _commands = dict([(name, 'django.core') for name in find_commands(__path__[0])])
+        _commands = dict([(name, 'django.core') for name in find_commands('django.core')])
 
         # Find the installed apps
         from django.conf import settings
@@ -115,9 +80,8 @@ def get_commands():
         # Find and load the management module for each installed app.
         for app_name in apps:
             try:
-                path = find_management_module(app_name)
                 _commands.update(dict([(name, app_name)
-                                       for name in find_commands(path)]))
+                                       for name in find_commands(app_name)]))
             except ImportError:
                 pass # No management module - ignore this app
 
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 95c865d..70abd1c 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1017,7 +1017,9 @@ class ForeignKey(RelatedField, Field):
         if value is None:
             return
 
-        using = router.db_for_read(model_instance.__class__, instance=model_instance)
+        using = model_instance._state.db
+        if using is None:
+            using = router.db_for_read(model_instance.__class__, instance=model_instance)
         qs = self.rel.to._default_manager.using(using).filter(
                 **{self.rel.field_name: value}
              )
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7ea4cd7..223640e 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -226,8 +226,11 @@ class SQLCompiler(object):
 
         for table, col in self.query.related_select_cols:
             r = '%s.%s' % (qn(table), qn(col))
-            if with_aliases and col in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if col in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = col
                 result.append('%s AS %s' % (r, c_alias))
                 aliases.add(c_alias)
                 col_aliases.add(c_alias)
@@ -289,8 +292,11 @@ class SQLCompiler(object):
                 result.append((alias, field.column))
                 aliases.add(alias)
                 continue
-            if with_aliases and field.column in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if field.column in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = field.column
                 result.append('%s.%s AS %s' % (qn(alias),
                     qn2(field.column), c_alias))
                 col_aliases.add(c_alias)
diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index 2daafed..6ee1875 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -98,7 +98,22 @@ def reloader_thread():
 
 def restart_with_reloader():
     while True:
-        args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + sys.argv
+        # Fix for django+py2exe issue:
+        #
+        # Normally:
+        # sys.executable is 'python.exe' and the sys.argv[0] is the script name.
+        # The autoreload thread then runs 'python.exe script arguments'.
+        #
+        # When running from py2exe things are different:
+        # sys.executable is set to 'frepplectl.exe' and sys.argv[0] is
+        # also 'frepplectl.exe'.
+        # The autoreload thread should run "frepplectl.exe arguments" and not
+        # "frepplectl.exe frepplectl.exe arguments". Now the interpreter and the script
+        # are basically one and the same.
+        #
+        #Original code:
+        # args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + sys.argv
+        args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + [i for i in sys.argv if not sys.executable.endswith(i)]
         if sys.platform == "win32":
             args = ['"%s"' % arg for arg in args]
         new_environ = os.environ.copy()
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index cf6270c..2c261a5 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -137,7 +137,7 @@ def translation(language):
         # doesn't affect en-gb), even though they will both use the core "en"
         # translation. So we have to subvert Python's internal gettext caching.
         base_lang = lambda x: x.split('-', 1)[0]
-        if base_lang(lang) in [base_lang(trans) for trans in _translations]:
+        if res and base_lang(lang) in [base_lang(trans) for trans in _translations]:
             res._info = res._info.copy()
             res._catalog = res._catalog.copy()
 
