diff --git django/bin/__init__.py django/bin/__init__.py
new file mode 100644
index 0000000..675001b
--- /dev/null
+++ django/bin/__init__.py
@@ -0,0 +1 @@
+# Extra file is required to keep py2exe happy
\ No newline at end of file
diff --git django/conf/project_template/__init__.py django/conf/project_template/__init__.py
new file mode 100644
index 0000000..05cb70d
--- /dev/null
+++ django/conf/project_template/__init__.py
@@ -0,0 +1 @@
+# Extra file is required to keep py2exe happy
diff --git django/contrib/admin/models.py django/contrib/admin/models.py
index 636a99b..1be629b 100644
--- django/contrib/admin/models.py
+++ django/contrib/admin/models.py
@@ -74,11 +74,20 @@ class LogEntry(models.Model):
     def get_admin_url(self):
         """
         Returns the admin URL to edit the object represented by this log entry.
+        FrePPLe change:
+            This code assumes there is only a single admin, with name "admin".
+            In frePPLe we have 2 admin sites: "data" and "admin".
+            Ideally we'ld like to avoid hardcoding the admin name. In the meantime we add
+            another hardcoded value.
         """
         if self.content_type and self.object_id:
-            url_name = 'admin:%s_%s_change' % (self.content_type.app_label, self.content_type.model)
+            url_name = 'data:%s_%s_change' % (self.content_type.app_label, self.content_type.model)
             try:
                 return reverse(url_name, args=(quote(self.object_id),))
             except NoReverseMatch:
-                pass
+                try:
+                    url_name = 'admin:%s_%s_change' % (self.content_type.app_label, self.content_type.model)
+                    return reverse(url_name, args=(quote(self.object_id),))
+                except NoReverseMatch:
+                    pass
         return None
diff --git django/contrib/admin/widgets.py django/contrib/admin/widgets.py
index b5d1c49..d3e0d6f 100644
--- django/contrib/admin/widgets.py
+++ django/contrib/admin/widgets.py
@@ -6,6 +6,7 @@ from __future__ import unicode_literals
 import copy
 
 from django import forms
+from django.db import DEFAULT_DB_ALIAS
 from django.contrib.admin.templatetags.admin_static import static
 from django.core.urlresolvers import reverse
 from django.db.models.deletion import CASCADE
@@ -20,6 +21,7 @@ from django.utils.html import (
 from django.utils.safestring import mark_safe
 from django.utils.text import Truncator
 from django.utils.translation import ugettext as _
+from django.utils.http import urlquote
 
 
 class FilteredSelectMultiple(forms.SelectMultiple):
@@ -155,6 +157,10 @@ class ForeignKeyRawIdWidget(forms.TextInput):
         if attrs is None:
             attrs = {}
         extra = []
+        if self.db == DEFAULT_DB_ALIAS:
+          prefix = ''
+        else:
+          prefix = '/%s' % self.db
         if rel_to in self.admin_site._registry:
             # The related object is registered with the same AdminSite
             related_url = reverse(
@@ -174,11 +180,13 @@ class ForeignKeyRawIdWidget(forms.TextInput):
                 attrs['class'] = 'vForeignKeyRawIdAdminField'  # The JavaScript code looks for this hook.
             # TODO: "lookup_id_" is hard-coded here. This should instead use
             # the correct API to determine the ID dynamically.
-            extra.append('<a href="%s%s" class="related-lookup" id="lookup_id_%s" title="%s"></a>' %
-                (related_url, url, name, _('Lookup')))
+            extra.append('<a href="%s%s%s" class="related-lookup" id="lookup_id_%s" title="%s"></a>' %
+                (prefix, related_url, url, name, _('Lookup')))
         output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra
         if value:
-            output.append(self.label_for_value(value))
+           # FREPPLE DOES NOT SHOW THE CURRENT VALUE, BUT ADDS AN EDIT LINK
+           #output.append(self.label_for_value(value))
+           output.append('<a href="%s%s%s/"> <img src="%s" width="16" height="16" alt="%s" /></a>' % (prefix, related_url, urlquote(value), static('admin/img/icon_changelink.gif'), _('Edit')))
         return mark_safe(''.join(output))
 
     def base_url_parameters(self):
diff --git django/db/models/fields/related.py django/db/models/fields/related.py
index c0680ee..e1ee50a 100644
--- django/db/models/fields/related.py
+++ django/db/models/fields/related.py
@@ -1917,7 +1917,9 @@ class ForeignKey(ForeignObject):
         if value is None:
             return
 
-        using = router.db_for_read(model_instance.__class__, instance=model_instance)
+        using = model_instance._state.db
+        if using is None:
+            using = router.db_for_read(model_instance.__class__, instance=model_instance)
         qs = self.rel.to._default_manager.using(using).filter(
             **{self.rel.field_name: value}
         )
diff --git django/template/base.py django/template/base.py
index 5661bdc..6e9c9b7 100644
--- django/template/base.py
+++ django/template/base.py
@@ -1289,6 +1289,11 @@ class Library(object):
                     csrf_token = context.get('csrf_token', None)
                     if csrf_token is not None:
                         new_context['csrf_token'] = csrf_token
+                    # Copy across the request, because inclusion tags often need
+                    # access to the request
+                    request = context.get('request', None)
+                    if request is not None:
+                        new_context['request'] = request
                     return t.render(new_context)
 
             function_name = (name or
diff --git django/utils/autoreload.py django/utils/autoreload.py
index 5cb7fd0..ff83dd9 100644
--- django/utils/autoreload.py
+++ django/utils/autoreload.py
@@ -274,7 +274,22 @@ def reloader_thread():
 
 def restart_with_reloader():
     while True:
-        args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + sys.argv
+        # Fix for django+py2exe issue:
+        #
+        # Normally:
+        # sys.executable is 'python.exe' and the sys.argv[0] is the script name.
+        # The autoreload thread then runs 'python.exe script arguments'.
+        #
+        # When running from py2exe things are different:
+        # sys.executable is set to 'manage.exe' and sys.argv[0] is
+        # also 'manage.exe'.
+        # The autoreload thread should run "manage.exe arguments" and not
+        # "manage.exe manage.exe arguments". Now the interpreter and the script are
+        # basically one and the same.
+        #
+        #Original code:
+        # args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + sys.argv
+        args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + [i for i in sys.argv if not sys.executable.endswith(i)]
         if sys.platform == "win32":
             args = ['"%s"' % arg for arg in args]
         new_environ = os.environ.copy()
