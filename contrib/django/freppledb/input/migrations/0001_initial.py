#
# Copyright (C) 2015 by frePPLe bvba
#
# All information contained herein is, and remains the property of frePPLe.
# You are allowed to use and modify the source code, as long as the software is used
# within your company.
# You are not allowed to distribute the software, either in the form of source code
# or in the form of compiled binaries.
#
import datetime

from django.conf import settings
from django.core.management import call_command
from django.db import models, migrations
import django.utils.timezone

import freppledb.common.fields


def loadParameters(apps, schema_editor):
  call_command('loaddata', "parameters.json", app_label="input", verbosity=0)


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0001_initial'),
        ('admin', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Buffer',
            fields=[
                ('lft', models.PositiveIntegerField(editable=False, blank=True, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('lvl', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('type', models.CharField(max_length=20, default='default', null=True, verbose_name='type', blank=True, choices=[('default', 'Default'), ('infinite', 'Infinite'), ('procure', 'Procure')])),
                ('onhand', models.DecimalField(max_digits=15, decimal_places=4, default='0.00', null=True, verbose_name='onhand', help_text='current inventory', blank=True)),
                ('minimum', models.DecimalField(max_digits=15, decimal_places=4, default='0.00', null=True, verbose_name='minimum', help_text='Safety stock', blank=True)),
                ('carrying_cost', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='carrying cost', help_text='Cost of holding inventory in this buffer, expressed as an annual percentage of the item price.', blank=True)),
                ('leadtime', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='leadtime', help_text='Leadtime for supplier of a procure buffer', blank=True)),
                ('fence', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='fence', help_text='Frozen fence for creating new procurements', blank=True)),
                ('min_inventory', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='min_inventory', help_text='Inventory level that triggers replenishment of a procure buffer', blank=True)),
                ('max_inventory', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='max_inventory', help_text='Inventory level to which a procure buffer is replenished', blank=True)),
                ('min_interval', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='min_interval', help_text='Minimum time interval between replenishments of a procure buffer', blank=True)),
                ('max_interval', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='max_interval', help_text='Maximum time interval between replenishments of a procure buffer', blank=True)),
                ('size_minimum', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='size_minimum', help_text='Minimum size of replenishments of a procure buffer', blank=True)),
                ('size_multiple', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='size_multiple', help_text='Replenishments of a procure buffer are a multiple of this quantity', blank=True)),
                ('size_maximum', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='size_maximum', help_text='Maximum size of replenishments of a procure buffer', blank=True)),
            ],
            options={
                'verbose_name': 'buffer',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'buffer',
                'verbose_name_plural': 'buffers',
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60)),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('defaultvalue', models.DecimalField(max_digits=15, decimal_places=4, default='0.00', null=True, verbose_name='default value', help_text='Value to be used when no entry is effective', blank=True)),
            ],
            options={
                'verbose_name': 'calendar',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'calendar',
                'verbose_name_plural': 'calendars',
            },
        ),
        migrations.CreateModel(
            name='CalendarBucket',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.AutoField(serialize=False, verbose_name='identifier', primary_key=True)),
                ('startdate', models.DateTimeField(null=True, verbose_name='start date', blank=True)),
                ('enddate', models.DateTimeField(default=datetime.datetime(2030, 12, 31, 0, 0), null=True, verbose_name='end date', blank=True)),
                ('value', models.DecimalField(default='0.00', decimal_places=4, verbose_name='value', blank=True, max_digits=15)),
                ('priority', models.IntegerField(default=0, null=True, verbose_name='priority', blank=True)),
                ('monday', models.BooleanField(default=True, verbose_name='Monday')),
                ('tuesday', models.BooleanField(default=True, verbose_name='Tuesday')),
                ('wednesday', models.BooleanField(default=True, verbose_name='Wednesday')),
                ('thursday', models.BooleanField(default=True, verbose_name='Thursday')),
                ('friday', models.BooleanField(default=True, verbose_name='Friday')),
                ('saturday', models.BooleanField(default=True, verbose_name='Saturday')),
                ('sunday', models.BooleanField(default=True, verbose_name='Sunday')),
                ('starttime', models.TimeField(default=datetime.time(0, 0), null=True, verbose_name='start time', blank=True)),
                ('endtime', models.TimeField(default=datetime.time(23, 59, 59), null=True, verbose_name='end time', blank=True)),
                ('calendar', models.ForeignKey(to='input.Calendar', verbose_name='calendar', related_name='buckets')),
            ],
            options={
                'verbose_name': 'calendar bucket',
                'abstract': False,
                'ordering': ['calendar', 'id'],
                'db_table': 'calendarbucket',
                'verbose_name_plural': 'calendar buckets',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('lft', models.PositiveIntegerField(editable=False, db_index=True, null=True, blank=True)),
                ('rght', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('lvl', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('owner', models.ForeignKey(to='input.Customer', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True)),
            ],
            options={
                'verbose_name': 'customer',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'customer',
                'verbose_name_plural': 'customers',
            },
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('lft', models.PositiveIntegerField(editable=False, db_index=True, null=True, blank=True)),
                ('rght', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('lvl', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('due', models.DateTimeField(verbose_name='due', help_text='Due date of the demand')),
                ('status', models.CharField(max_length=10, default='open', null=True, verbose_name='status', help_text='Status of the demand. Only "open" demands are planned', choices=[('inquiry', 'Inquiry'), ('quote', 'Quote'), ('open', 'Open'), ('closed', 'Closed'), ('canceled', 'Canceled')], blank=True)),
                ('quantity', models.DecimalField(max_digits=15, decimal_places=4, verbose_name='quantity')),
                ('priority', models.PositiveIntegerField(default=10, verbose_name='priority', help_text='Priority of the demand (lower numbers indicate more important demands)', choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20')])),
                ('minshipment', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='minimum shipment', help_text='Minimum shipment quantity when planning this demand', blank=True)),
                ('maxlateness', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='maximum lateness', help_text='Maximum lateness allowed when planning this demand', blank=True)),
                ('customer', models.ForeignKey(to='input.Customer', null=True, verbose_name='customer', blank=True)),
            ],
            options={
                'verbose_name': 'demand',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'demand',
                'verbose_name_plural': 'demands',
            },
        ),
        migrations.CreateModel(
            name='DistributionOrder',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.IntegerField(serialize=False, verbose_name='identifier', primary_key=True, help_text='Unique identifier')),
                ('reference', models.CharField(null=True, verbose_name='reference', help_text='External reference of this order', max_length=60, blank=True)),
                ('status', models.CharField(max_length=20, null=True, verbose_name='status', help_text='Status of the order', choices=[('confirmed', 'confirmed'), ('approved', 'approved'), ('proposed', 'proposed')], blank=True)),
                ('quantity', models.DecimalField(default='1.00', decimal_places=4, verbose_name='quantity', max_digits=15)),
                ('startdate', models.DateTimeField(null=True, verbose_name='start date', help_text='start date', blank=True)),
                ('enddate', models.DateTimeField(null=True, verbose_name='end date', help_text='end date', blank=True)),
                ('criticality', models.DecimalField(max_digits=15, null=True, verbose_name='criticality', blank=True, decimal_places=4)),
            ],
            options={
                'verbose_name': 'distribution order',
                'abstract': False,
                'ordering': ['id'],
                'db_table': 'distribution_order',
                'verbose_name_plural': 'distribution orders',
            },
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.AutoField(serialize=False, verbose_name='identifier', primary_key=True)),
                ('quantity', models.DecimalField(default='1.00', decimal_places=4, verbose_name='quantity', help_text='Quantity to consume or produce per operationplan unit', max_digits=15)),
                ('type', models.CharField(max_length=20, default='start', null=True, verbose_name='type', help_text='Consume/produce material at the start or the end of the operationplan', choices=[('start', 'Start'), ('end', 'End'), ('fixed_start', 'Fixed start'), ('fixed_end', 'Fixed end')], blank=True)),
                ('effective_start', models.DateTimeField(null=True, verbose_name='effective start', help_text='Validity start date', blank=True)),
                ('effective_end', models.DateTimeField(null=True, verbose_name='effective end', help_text='Validity end date', blank=True)),
                ('name', models.CharField(null=True, verbose_name='name', help_text='Optional name of this flow', max_length=60, blank=True)),
                ('alternate', models.CharField(null=True, verbose_name='alternate', help_text='Puts the flow in a group of alternate flows', max_length=60, blank=True)),
                ('priority', models.IntegerField(default=1, null=True, verbose_name='priority', help_text='Priority of this flow in a group of alternates', blank=True)),
                ('search', models.CharField(max_length=20, null=True, verbose_name='search mode', help_text='Method to select preferred alternate', choices=[('PRIORITY', 'priority'), ('MINCOST', 'minimum cost'), ('MINPENALTY', 'minimum penalty'), ('MINCOSTPENALTY', 'minimum cost plus penalty')], blank=True)),
            ],
            options={
                'verbose_name': 'flow',
                'db_table': 'flow',
                'abstract': False,
                'verbose_name_plural': 'flows',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('lft', models.PositiveIntegerField(editable=False, db_index=True, null=True, blank=True)),
                ('rght', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('lvl', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('price', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='price', help_text='Selling price of the item', blank=True)),
            ],
            options={
                'verbose_name': 'item',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'item',
                'verbose_name_plural': 'items',
            },
        ),
        migrations.CreateModel(
            name='ItemSupplier',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.AutoField(serialize=False, verbose_name='identifier', primary_key=True)),
                ('leadtime', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='lead time', help_text='Purchasing lead time', blank=True)),
                ('sizeminimum', models.DecimalField(max_digits=15, decimal_places=4, default='1.0', null=True, verbose_name='size minimum', help_text='A minimum purchasing quantity', blank=True)),
                ('sizemultiple', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='size multiple', help_text='A multiple purchasing quantity', blank=True)),
                ('cost', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='cost', help_text='Purchasing cost per unit', blank=True)),
                ('priority', models.IntegerField(default=1, null=True, verbose_name='priority', help_text='Priority of this flow in a group of alternates', blank=True)),
                ('effective_start', models.DateTimeField(null=True, verbose_name='effective start', help_text='Validity start date', blank=True)),
                ('effective_end', models.DateTimeField(null=True, verbose_name='effective end', help_text='Validity end date', blank=True)),
                ('item', models.ForeignKey(to='input.Item', verbose_name='item', related_name='items')),
            ],
            options={
                'verbose_name': 'item supplier',
                'db_table': 'itemsupplier',
                'abstract': False,
                'verbose_name_plural': 'item suppliers',
            },
        ),
        migrations.CreateModel(
            name='Load',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.AutoField(serialize=False, verbose_name='identifier', primary_key=True)),
                ('quantity', models.DecimalField(default='1.00', decimal_places=4, verbose_name='quantity', max_digits=15)),
                ('effective_start', models.DateTimeField(null=True, verbose_name='effective start', help_text='Validity start date', blank=True)),
                ('effective_end', models.DateTimeField(null=True, verbose_name='effective end', help_text='Validity end date', blank=True)),
                ('name', models.CharField(null=True, verbose_name='name', help_text='Optional name of this load', max_length=60, blank=True)),
                ('alternate', models.CharField(null=True, verbose_name='alternate', help_text='Puts the load in a group of alternate loads', max_length=60, blank=True)),
                ('priority', models.IntegerField(default=1, null=True, verbose_name='priority', help_text='Priority of this load in a group of alternates', blank=True)),
                ('setup', models.CharField(null=True, verbose_name='setup', help_text='Setup required on the resource for this operation', max_length=60, blank=True)),
                ('search', models.CharField(max_length=20, null=True, verbose_name='search mode', help_text='Method to select preferred alternate', choices=[('PRIORITY', 'priority'), ('MINCOST', 'minimum cost'), ('MINPENALTY', 'minimum penalty'), ('MINCOSTPENALTY', 'minimum cost plus penalty')], blank=True)),
            ],
            options={
                'verbose_name': 'load',
                'db_table': 'resourceload',
                'abstract': False,
                'verbose_name_plural': 'loads',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('lft', models.PositiveIntegerField(editable=False, db_index=True, null=True, blank=True)),
                ('rght', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('lvl', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('available', models.ForeignKey(to='input.Calendar', null=True, verbose_name='available', help_text='Calendar defining the working hours and holidays of this location', blank=True)),
                ('owner', models.ForeignKey(to='input.Location', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True)),
            ],
            options={
                'verbose_name': 'location',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'location',
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60)),
                ('type', models.CharField(max_length=20, default='fixed_time', null=True, verbose_name='type', blank=True, choices=[('fixed_time', 'fixed_time'), ('time_per', 'time_per'), ('routing', 'routing'), ('alternate', 'alternate'), ('split', 'split')])),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('fence', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='release fence', help_text='Operationplans within this time window from the current day are expected to be released to production ERP', blank=True)),
                ('posttime', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='post-op time', help_text='A delay time to be respected as a soft constraint after ending the operation', blank=True)),
                ('sizeminimum', models.DecimalField(max_digits=15, decimal_places=4, default='1.0', null=True, verbose_name='size minimum', help_text='A minimum quantity for operationplans', blank=True)),
                ('sizemultiple', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='size multiple', help_text='A multiple quantity for operationplans', blank=True)),
                ('sizemaximum', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='size maximum', help_text='A maximum quantity for operationplans', blank=True)),
                ('cost', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='cost', help_text='Cost per operationplan unit', blank=True)),
                ('duration', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='duration', help_text='A fixed duration for the operation', blank=True)),
                ('duration_per', freppledb.common.fields.DurationField(max_digits=15, decimal_places=4, null=True, verbose_name='duration per unit', help_text='A variable duration for the operation', blank=True)),
                ('search', models.CharField(max_length=20, null=True, verbose_name='search mode', help_text='Method to select preferred alternate', choices=[('PRIORITY', 'priority'), ('MINCOST', 'minimum cost'), ('MINPENALTY', 'minimum penalty'), ('MINCOSTPENALTY', 'minimum cost plus penalty')], blank=True)),
                ('location', models.ForeignKey(to='input.Location', null=True, verbose_name='location', blank=True)),
            ],
            options={
                'verbose_name': 'operation',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'operation',
                'verbose_name_plural': 'operations',
            },
        ),
        migrations.CreateModel(
            name='OperationPlan',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.IntegerField(serialize=False, verbose_name='identifier', primary_key=True, help_text='Unique identifier of an operationplan')),
                ('status', models.CharField(max_length=20, null=True, verbose_name='status', help_text='Status of the order', choices=[('confirmed', 'confirmed'), ('approved', 'approved'), ('proposed', 'proposed')], blank=True)),
                ('reference', models.CharField(null=True, verbose_name='reference', help_text='External reference of this order', max_length=60, blank=True)),
                ('quantity', models.DecimalField(default='1.00', decimal_places=4, verbose_name='quantity', max_digits=15)),
                ('startdate', models.DateTimeField(null=True, verbose_name='start date', help_text='start date', blank=True)),
                ('enddate', models.DateTimeField(null=True, verbose_name='end date', help_text='end date', blank=True)),
                ('criticality', models.DecimalField(max_digits=15, null=True, verbose_name='criticality', blank=True, decimal_places=4)),
                ('operation', models.ForeignKey(verbose_name='operation', to='input.Operation')),
                ('owner', models.ForeignKey(to='input.OperationPlan', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True)),
            ],
            options={
                'verbose_name': 'operationplan',
                'abstract': False,
                'ordering': ['id'],
                'db_table': 'operationplan',
                'verbose_name_plural': 'operationplans',
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.IntegerField(serialize=False, verbose_name='identifier', primary_key=True, help_text='Unique identifier')),
                ('reference', models.CharField(null=True, verbose_name='reference', help_text='External reference of this order', max_length=60, blank=True)),
                ('status', models.CharField(max_length=20, null=True, verbose_name='status', help_text='Status of the order', choices=[('confirmed', 'confirmed'), ('proposed', 'proposed'), ('approved', 'approved')], blank=True)),
                ('quantity', models.DecimalField(default='1.00', decimal_places=4, verbose_name='quantity', max_digits=15)),
                ('startdate', models.DateTimeField(null=True, verbose_name='start date', help_text='start date', blank=True)),
                ('enddate', models.DateTimeField(null=True, verbose_name='end date', help_text='end date', blank=True)),
                ('criticality', models.DecimalField(max_digits=15, null=True, verbose_name='criticality', blank=True, decimal_places=4)),
                ('item', models.ForeignKey(verbose_name='item', to='input.Item')),
                ('location', models.ForeignKey(verbose_name='location', to='input.Location')),
            ],
            options={
                'verbose_name': 'purchase order',
                'abstract': False,
                'ordering': ['id'],
                'db_table': 'purchase_order',
                'verbose_name_plural': 'purchase orders',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('lft', models.PositiveIntegerField(editable=False, db_index=True, null=True, blank=True)),
                ('rght', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('lvl', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('type', models.CharField(max_length=20, default='default', null=True, verbose_name='type', blank=True, choices=[('default', 'Default'), ('buckets', 'Buckets'), ('infinite', 'Infinite')])),
                ('maximum', models.DecimalField(max_digits=15, decimal_places=4, default='1.00', null=True, verbose_name='maximum', help_text='Size of the resource', blank=True)),
                ('cost', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='cost', help_text='Cost for using 1 unit of the resource for 1 hour', blank=True)),
                ('maxearly', freppledb.common.fields.DurationField(max_digits=15, decimal_places=0, null=True, verbose_name='max early', help_text='Time window before the ask date where we look for available capacity', blank=True)),
                ('setup', models.CharField(null=True, verbose_name='setup', help_text='Setup of the resource at the start of the plan', max_length=60, blank=True)),
                ('location', models.ForeignKey(to='input.Location', null=True, verbose_name='location', blank=True)),
                ('maximum_calendar', models.ForeignKey(to='input.Calendar', null=True, verbose_name='maximum calendar', help_text='Calendar defining the resource size varying over time', blank=True)),
                ('owner', models.ForeignKey(to='input.Resource', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True)),
            ],
            options={
                'verbose_name': 'resource',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'resource',
                'verbose_name_plural': 'resources',
            },
        ),
        migrations.CreateModel(
            name='ResourceSkill',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.AutoField(serialize=False, verbose_name='identifier', primary_key=True)),
                ('effective_start', models.DateTimeField(null=True, verbose_name='effective start', help_text='Validity start date', blank=True)),
                ('effective_end', models.DateTimeField(null=True, verbose_name='effective end', help_text='Validity end date', blank=True)),
                ('priority', models.IntegerField(default=1, null=True, verbose_name='priority', help_text='Priority of this skill in a group of alternates', blank=True)),
                ('resource', models.ForeignKey(to='input.Resource', verbose_name='resource', related_name='skills')),
            ],
            options={
                'ordering': ['resource', 'skill'],
                'db_table': 'resourceskill',
                'verbose_name_plural': 'resource skills',
                'abstract': False,
                'verbose_name': 'resource skill',
            },
        ),
        migrations.CreateModel(
            name='SetupMatrix',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60)),
            ],
            options={
                'verbose_name': 'setup matrix',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'setupmatrix',
                'verbose_name_plural': 'setup matrices',
            },
        ),
        migrations.CreateModel(
            name='SetupRule',
            fields=[
                ('id', models.AutoField(serialize=False, verbose_name='ID', auto_created=True, primary_key=True)),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('priority', models.IntegerField(verbose_name='priority')),
                ('fromsetup', models.CharField(null=True, verbose_name='from setup', help_text='Name of the old setup (wildcard characters are supported)', max_length=60, blank=True)),
                ('tosetup', models.CharField(null=True, verbose_name='to setup', help_text='Name of the new setup (wildcard characters are supported)', max_length=60, blank=True)),
                ('duration', freppledb.common.fields.DurationField(max_digits=15, decimal_places=0, null=True, verbose_name='duration', help_text='Duration of the changeover', blank=True)),
                ('cost', models.DecimalField(max_digits=15, decimal_places=4, null=True, verbose_name='cost', help_text='Cost of the conversion', blank=True)),
                ('setupmatrix', models.ForeignKey(to='input.SetupMatrix', verbose_name='setup matrix', related_name='rules')),
            ],
            options={
                'ordering': ['priority'],
                'db_table': 'setuprule',
                'verbose_name_plural': 'setup matrix rules',
                'abstract': False,
                'verbose_name': 'setup matrix rule',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
            ],
            options={
                'verbose_name': 'skill',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'skill',
                'verbose_name_plural': 'skills',
            },
        ),
        migrations.CreateModel(
            name='SubOperation',
            fields=[
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('id', models.AutoField(serialize=False, verbose_name='identifier', primary_key=True)),
                ('priority', models.IntegerField(default=1, verbose_name='priority', help_text='Sequence of this operation among the suboperations. Negative values are ignored.')),
                ('effective_start', models.DateTimeField(null=True, verbose_name='effective start', help_text='Validity start date', blank=True)),
                ('effective_end', models.DateTimeField(null=True, verbose_name='effective end', help_text='Validity end date', blank=True)),
                ('operation', models.ForeignKey(to='input.Operation', related_name='suboperations', verbose_name='operation', help_text='Parent operation')),
                ('suboperation', models.ForeignKey(to='input.Operation', related_name='superoperations', verbose_name='suboperation', help_text='Child operation')),
            ],
            options={
                'verbose_name': 'suboperation',
                'abstract': False,
                'ordering': ['operation', 'priority', 'suboperation'],
                'db_table': 'suboperation',
                'verbose_name_plural': 'suboperations',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('lft', models.PositiveIntegerField(editable=False, db_index=True, null=True, blank=True)),
                ('rght', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('lvl', models.PositiveIntegerField(editable=False, null=True, blank=True)),
                ('name', models.CharField(serialize=False, verbose_name='name', primary_key=True, max_length=60, help_text='Unique identifier')),
                ('source', models.CharField(db_index=True, null=True, verbose_name='source', blank=True, max_length=20)),
                ('lastmodified', models.DateTimeField(editable=False, default=django.utils.timezone.now, db_index=True, verbose_name='last modified')),
                ('description', models.CharField(null=True, verbose_name='description', blank=True, max_length=200)),
                ('category', models.CharField(db_index=True, null=True, verbose_name='category', blank=True, max_length=20)),
                ('subcategory', models.CharField(db_index=True, null=True, verbose_name='subcategory', blank=True, max_length=20)),
                ('owner', models.ForeignKey(to='input.Supplier', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True)),
            ],
            options={
                'verbose_name': 'supplier',
                'abstract': False,
                'ordering': ['name'],
                'db_table': 'supplier',
                'verbose_name_plural': 'suppliers',
            },
        ),
        migrations.AddField(
            model_name='resourceskill',
            name='skill',
            field=models.ForeignKey(to='input.Skill', verbose_name='skill', related_name='resources'),
        ),
        migrations.AddField(
            model_name='resource',
            name='setupmatrix',
            field=models.ForeignKey(to='input.SetupMatrix', null=True, verbose_name='setup matrix', help_text='Setup matrix defining the conversion time and cost', blank=True),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier',
            field=models.ForeignKey(verbose_name='supplier', to='input.Supplier'),
        ),
        migrations.AddField(
            model_name='load',
            name='operation',
            field=models.ForeignKey(to='input.Operation', verbose_name='operation', related_name='loads'),
        ),
        migrations.AddField(
            model_name='load',
            name='resource',
            field=models.ForeignKey(to='input.Resource', verbose_name='resource', related_name='loads'),
        ),
        migrations.AddField(
            model_name='load',
            name='skill',
            field=models.ForeignKey(to='input.Skill', related_name='loads', null=True, verbose_name='skill', blank=True),
        ),
        migrations.AddField(
            model_name='itemsupplier',
            name='location',
            field=models.ForeignKey(to='input.Location', related_name='itemsuppliers', null=True, verbose_name='location', blank=True),
        ),
        migrations.AddField(
            model_name='itemsupplier',
            name='supplier',
            field=models.ForeignKey(to='input.Supplier', verbose_name='supplier', related_name='suppliers'),
        ),
        migrations.AddField(
            model_name='item',
            name='operation',
            field=models.ForeignKey(to='input.Operation', null=True, verbose_name='delivery operation', help_text='Default operation used to ship a demand for this item', blank=True),
        ),
        migrations.AddField(
            model_name='item',
            name='owner',
            field=models.ForeignKey(to='input.Item', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True),
        ),
        migrations.AddField(
            model_name='flow',
            name='operation',
            field=models.ForeignKey(to='input.Operation', verbose_name='operation', related_name='flows'),
        ),
        migrations.AddField(
            model_name='flow',
            name='thebuffer',
            field=models.ForeignKey(to='input.Buffer', verbose_name='buffer', related_name='flows'),
        ),
        migrations.AddField(
            model_name='distributionorder',
            name='destination',
            field=models.ForeignKey(to='input.Location', related_name='destinations', verbose_name='destination'),
        ),
        migrations.AddField(
            model_name='distributionorder',
            name='item',
            field=models.ForeignKey(verbose_name='item', to='input.Item'),
        ),
        migrations.AddField(
            model_name='distributionorder',
            name='origin',
            field=models.ForeignKey(to='input.Location', related_name='origins', null=True, verbose_name='origin', blank=True),
        ),
        migrations.AddField(
            model_name='demand',
            name='item',
            field=models.ForeignKey(to='input.Item', null=True, verbose_name='item', blank=True),
        ),
        migrations.AddField(
            model_name='demand',
            name='operation',
            field=models.ForeignKey(to='input.Operation', related_name='used_demand', null=True, verbose_name='delivery operation', help_text='Operation used to satisfy this demand', blank=True),
        ),
        migrations.AddField(
            model_name='demand',
            name='owner',
            field=models.ForeignKey(to='input.Demand', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='item',
            field=models.ForeignKey(null=True, verbose_name='item', to='input.Item'),
        ),
        migrations.AddField(
            model_name='buffer',
            name='location',
            field=models.ForeignKey(to='input.Location', null=True, verbose_name='location', blank=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='minimum_calendar',
            field=models.ForeignKey(to='input.Calendar', null=True, verbose_name='minimum calendar', help_text='Calendar storing a time-dependent safety stock profile', blank=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='owner',
            field=models.ForeignKey(to='input.Buffer', related_name='xchildren', null=True, verbose_name='owner', help_text='Hierarchical parent', blank=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='producing',
            field=models.ForeignKey(to='input.Operation', related_name='used_producing', null=True, verbose_name='producing', help_text='Operation to replenish the buffer', blank=True),
        ),
        migrations.AlterUniqueTogether(
            name='setuprule',
            unique_together=set([('setupmatrix', 'priority')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourceskill',
            unique_together=set([('resource', 'skill')]),
        ),
        migrations.AlterUniqueTogether(
            name='load',
            unique_together=set([('operation', 'resource')]),
        ),
        migrations.AlterUniqueTogether(
            name='itemsupplier',
            unique_together=set([('supplier', 'item', 'location')]),
        ),
        migrations.AlterUniqueTogether(
            name='flow',
            unique_together=set([('operation', 'thebuffer')]),
        ),
        migrations.RunPython(loadParameters),
    ]
