#
# Copyright (C) 2015 by frePPLe bvba
#
# All information contained herein is, and remains the property of frePPLe.
# You are allowed to use and modify the source code, as long as the software is used
# within your company.
# You are not allowed to distribute the software, either in the form of source code
# or in the form of compiled binaries.
#
import datetime

from django.core.management import call_command
from django.db import models, migrations
import django.utils.timezone

import freppledb.common.fields


def loadParameters(apps, schema_editor):
  call_command('loaddata', "parameters.json", app_label="input", verbosity=0)


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0001_initial'),
        ('admin', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Buffer',
            fields=[
                ('lft', models.PositiveIntegerField(blank=True, editable=False, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('lvl', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('type', models.CharField(max_length=20, choices=[('default', 'Default'), ('infinite', 'Infinite'), ('procure', 'Procure')], blank=True, verbose_name='type', default='default', null=True)),
                ('onhand', models.DecimalField(blank=True, max_digits=15, decimal_places=4, help_text='current inventory', verbose_name='onhand', default='0.00', null=True)),
                ('minimum', models.DecimalField(blank=True, max_digits=15, decimal_places=4, help_text='Safety stock', verbose_name='minimum', default='0.00', null=True)),
                ('leadtime', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Leadtime for supplier of a procure buffer', verbose_name='leadtime', max_digits=15, null=True)),
                ('fence', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Frozen fence for creating new procurements', verbose_name='fence', max_digits=15, null=True)),
                ('min_inventory', models.DecimalField(blank=True, decimal_places=4, help_text='Inventory level that triggers replenishment of a procure buffer', verbose_name='min_inventory', max_digits=15, null=True)),
                ('max_inventory', models.DecimalField(blank=True, decimal_places=4, help_text='Inventory level to which a procure buffer is replenished', verbose_name='max_inventory', max_digits=15, null=True)),
                ('min_interval', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Minimum time interval between replenishments of a procure buffer', verbose_name='min_interval', max_digits=15, null=True)),
                ('max_interval', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Maximum time interval between replenishments of a procure buffer', verbose_name='max_interval', max_digits=15, null=True)),
                ('size_minimum', models.DecimalField(blank=True, decimal_places=4, help_text='Minimum size of replenishments of a procure buffer', verbose_name='size_minimum', max_digits=15, null=True)),
                ('size_multiple', models.DecimalField(blank=True, decimal_places=4, help_text='Replenishments of a procure buffer are a multiple of this quantity', verbose_name='size_multiple', max_digits=15, null=True)),
                ('size_maximum', models.DecimalField(blank=True, decimal_places=4, help_text='Maximum size of replenishments of a procure buffer', verbose_name='size_maximum', max_digits=15, null=True)),
            ],
            options={
                'db_table': 'buffer',
                'verbose_name': 'buffer',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'buffers',
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('defaultvalue', models.DecimalField(blank=True, max_digits=15, decimal_places=4, help_text='Value to be used when no entry is effective', verbose_name='default value', default='0.00', null=True)),
            ],
            options={
                'db_table': 'calendar',
                'verbose_name': 'calendar',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'calendars',
            },
        ),
        migrations.CreateModel(
            name='CalendarBucket',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.AutoField(primary_key=True, verbose_name='identifier', serialize=False)),
                ('startdate', models.DateTimeField(blank=True, verbose_name='start date', null=True)),
                ('enddate', models.DateTimeField(blank=True, verbose_name='end date', default=datetime.datetime(2030, 12, 31, 0, 0), null=True)),
                ('value', models.DecimalField(blank=True, verbose_name='value', default='0.00', max_digits=15, decimal_places=4)),
                ('priority', models.IntegerField(blank=True, verbose_name='priority', default=0, null=True)),
                ('monday', models.BooleanField(verbose_name='Monday', default=True)),
                ('tuesday', models.BooleanField(verbose_name='Tuesday', default=True)),
                ('wednesday', models.BooleanField(verbose_name='Wednesday', default=True)),
                ('thursday', models.BooleanField(verbose_name='Thursday', default=True)),
                ('friday', models.BooleanField(verbose_name='Friday', default=True)),
                ('saturday', models.BooleanField(verbose_name='Saturday', default=True)),
                ('sunday', models.BooleanField(verbose_name='Sunday', default=True)),
                ('starttime', models.TimeField(blank=True, verbose_name='start time', default=datetime.time(0, 0), null=True)),
                ('endtime', models.TimeField(blank=True, verbose_name='end time', default=datetime.time(23, 59, 59), null=True)),
                ('calendar', models.ForeignKey(to='input.Calendar', related_name='buckets', verbose_name='calendar')),
            ],
            options={
                'db_table': 'calendarbucket',
                'verbose_name': 'calendar bucket',
                'abstract': False,
                'ordering': ['calendar', 'id'],
                'verbose_name_plural': 'calendar buckets',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('lft', models.PositiveIntegerField(blank=True, editable=False, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('lvl', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('owner', models.ForeignKey(blank=True, to='input.Customer', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True)),
            ],
            options={
                'db_table': 'customer',
                'verbose_name': 'customer',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'customers',
            },
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('lft', models.PositiveIntegerField(blank=True, editable=False, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('lvl', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('due', models.DateTimeField(verbose_name='due', help_text='Due date of the demand')),
                ('status', models.CharField(max_length=10, choices=[('inquiry', 'Inquiry'), ('quote', 'Quote'), ('open', 'Open'), ('closed', 'Closed'), ('canceled', 'Canceled')], default='open', blank=True, verbose_name='status', help_text='Status of the demand. Only "open" demands are planned', null=True)),
                ('quantity', models.DecimalField(decimal_places=4, verbose_name='quantity', max_digits=15)),
                ('priority', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20')], verbose_name='priority', default=10, help_text='Priority of the demand (lower numbers indicate more important demands)')),
                ('minshipment', models.DecimalField(blank=True, decimal_places=4, help_text='Minimum shipment quantity when planning this demand', verbose_name='minimum shipment', max_digits=15, null=True)),
                ('maxlateness', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Maximum lateness allowed when planning this demand', verbose_name='maximum lateness', max_digits=15, null=True)),
                ('customer', models.ForeignKey(blank=True, to='input.Customer', verbose_name='customer', null=True)),
            ],
            options={
                'db_table': 'demand',
                'verbose_name': 'demand',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'demands',
            },
        ),
        migrations.CreateModel(
            name='DistributionOrder',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.IntegerField(primary_key=True, verbose_name='identifier', serialize=False, help_text='Unique identifier')),
                ('reference', models.CharField(max_length=60, blank=True, verbose_name='reference', null=True, help_text='External reference of this order')),
                ('status', models.CharField(max_length=20, choices=[('confirmed', 'confirmed'), ('approved', 'approved'), ('proposed', 'proposed')], blank=True, verbose_name='status', help_text='Status of the order', null=True)),
                ('quantity', models.DecimalField(max_digits=15, verbose_name='quantity', default='1.00', decimal_places=4)),
                ('startdate', models.DateTimeField(blank=True, verbose_name='start date', null=True, help_text='start date')),
                ('enddate', models.DateTimeField(blank=True, verbose_name='end date', null=True, help_text='end date')),
                ('criticality', models.DecimalField(blank=True, verbose_name='criticality', max_digits=15, null=True, decimal_places=4)),
                ('consume_material', models.BooleanField(default=True, verbose_name='consume material', help_text='Consume material at origin location')),
            ],
            options={
                'db_table': 'distribution_order',
                'verbose_name': 'distribution order',
                'abstract': False,
                'ordering': ['id'],
                'verbose_name_plural': 'distribution orders',
            },
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.AutoField(primary_key=True, verbose_name='identifier', serialize=False)),
                ('quantity', models.DecimalField(max_digits=15, verbose_name='quantity', default='1.00', decimal_places=4, help_text='Quantity to consume or produce per operationplan unit')),
                ('type', models.CharField(max_length=20, choices=[('start', 'Start'), ('end', 'End'), ('fixed_start', 'Fixed start'), ('fixed_end', 'Fixed end')], default='start', blank=True, verbose_name='type', help_text='Consume/produce material at the start or the end of the operationplan', null=True)),
                ('effective_start', models.DateTimeField(blank=True, verbose_name='effective start', null=True, help_text='Validity start date')),
                ('effective_end', models.DateTimeField(blank=True, verbose_name='effective end', null=True, help_text='Validity end date')),
                ('name', models.CharField(max_length=60, blank=True, verbose_name='name', null=True, help_text='Optional name of this flow')),
                ('alternate', models.CharField(max_length=60, blank=True, verbose_name='alternate', null=True, help_text='Puts the flow in a group of alternate flows')),
                ('priority', models.IntegerField(blank=True, verbose_name='priority', default=1, null=True, help_text='Priority of this flow in a group of alternates')),
                ('search', models.CharField(max_length=20, choices=[('PRIORITY', 'priority'), ('MINCOST', 'minimum cost'), ('MINPENALTY', 'minimum penalty'), ('MINCOSTPENALTY', 'minimum cost plus penalty')], blank=True, verbose_name='search mode', help_text='Method to select preferred alternate', null=True)),
            ],
            options={
                'db_table': 'flow',
                'verbose_name': 'flow',
                'abstract': False,
                'verbose_name_plural': 'flows',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('lft', models.PositiveIntegerField(blank=True, editable=False, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('lvl', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('price', models.DecimalField(blank=True, decimal_places=4, help_text='Selling price of the item', verbose_name='price', max_digits=15, null=True)),
            ],
            options={
                'db_table': 'item',
                'verbose_name': 'item',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'items',
            },
        ),
        migrations.CreateModel(
            name='ItemDistribution',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.AutoField(primary_key=True, verbose_name='identifier', serialize=False)),
                ('leadtime', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Shipping lead time', verbose_name='lead time', max_digits=15, null=True)),
                ('sizeminimum', models.DecimalField(blank=True, max_digits=15, decimal_places=4, help_text='A minimum shipping quantity', verbose_name='size minimum', default='1.0', null=True)),
                ('sizemultiple', models.DecimalField(blank=True, decimal_places=4, help_text='A multiple shipping quantity', verbose_name='size multiple', max_digits=15, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=4, help_text='Shipping cost per unit', verbose_name='cost', max_digits=15, null=True)),
                ('priority', models.IntegerField(blank=True, verbose_name='priority', default=1, null=True, help_text='Priority among all alternates')),
                ('effective_start', models.DateTimeField(blank=True, verbose_name='effective start', null=True, help_text='Validity start date')),
                ('effective_end', models.DateTimeField(blank=True, verbose_name='effective end', null=True, help_text='Validity end date')),
                ('item', models.ForeignKey(to='input.Item', related_name='distributions', verbose_name='item')),
            ],
            options={
                'db_table': 'itemdistribution',
                'verbose_name': 'item distribution',
                'abstract': False,
                'verbose_name_plural': 'item distributions',
            },
        ),
        migrations.CreateModel(
            name='ItemSupplier',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.AutoField(primary_key=True, verbose_name='identifier', serialize=False)),
                ('leadtime', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Purchasing lead time', verbose_name='lead time', max_digits=15, null=True)),
                ('sizeminimum', models.DecimalField(blank=True, max_digits=15, decimal_places=4, help_text='A minimum purchasing quantity', verbose_name='size minimum', default='1.0', null=True)),
                ('sizemultiple', models.DecimalField(blank=True, decimal_places=4, help_text='A multiple purchasing quantity', verbose_name='size multiple', max_digits=15, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=4, help_text='Purchasing cost per unit', verbose_name='cost', max_digits=15, null=True)),
                ('priority', models.IntegerField(blank=True, verbose_name='priority', default=1, null=True, help_text='Priority among all alternates')),
                ('effective_start', models.DateTimeField(blank=True, verbose_name='effective start', null=True, help_text='Validity start date')),
                ('effective_end', models.DateTimeField(blank=True, verbose_name='effective end', null=True, help_text='Validity end date')),
                ('item', models.ForeignKey(to='input.Item', related_name='itemsuppliers', verbose_name='item')),
            ],
            options={
                'db_table': 'itemsupplier',
                'verbose_name': 'item supplier',
                'abstract': False,
                'verbose_name_plural': 'item suppliers',
            },
        ),
        migrations.CreateModel(
            name='Load',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.AutoField(primary_key=True, verbose_name='identifier', serialize=False)),
                ('quantity', models.DecimalField(max_digits=15, verbose_name='quantity', default='1.00', decimal_places=4)),
                ('effective_start', models.DateTimeField(blank=True, verbose_name='effective start', null=True, help_text='Validity start date')),
                ('effective_end', models.DateTimeField(blank=True, verbose_name='effective end', null=True, help_text='Validity end date')),
                ('name', models.CharField(max_length=60, blank=True, verbose_name='name', null=True, help_text='Optional name of this load')),
                ('alternate', models.CharField(max_length=60, blank=True, verbose_name='alternate', null=True, help_text='Puts the load in a group of alternate loads')),
                ('priority', models.IntegerField(blank=True, verbose_name='priority', default=1, null=True, help_text='Priority of this load in a group of alternates')),
                ('setup', models.CharField(max_length=60, blank=True, verbose_name='setup', null=True, help_text='Setup required on the resource for this operation')),
                ('search', models.CharField(max_length=20, choices=[('PRIORITY', 'priority'), ('MINCOST', 'minimum cost'), ('MINPENALTY', 'minimum penalty'), ('MINCOSTPENALTY', 'minimum cost plus penalty')], blank=True, verbose_name='search mode', help_text='Method to select preferred alternate', null=True)),
            ],
            options={
                'db_table': 'resourceload',
                'verbose_name': 'load',
                'abstract': False,
                'verbose_name_plural': 'loads',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('lft', models.PositiveIntegerField(blank=True, editable=False, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('lvl', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('available', models.ForeignKey(blank=True, to='input.Calendar', help_text='Calendar defining the working hours and holidays of this location', verbose_name='available', null=True)),
                ('owner', models.ForeignKey(blank=True, to='input.Location', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True)),
            ],
            options={
                'db_table': 'location',
                'verbose_name': 'location',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False)),
                ('type', models.CharField(max_length=20, choices=[('fixed_time', 'fixed_time'), ('time_per', 'time_per'), ('routing', 'routing'), ('alternate', 'alternate'), ('split', 'split')], blank=True, verbose_name='type', default='fixed_time', null=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('fence', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='Operationplans within this time window from the current day are expected to be released to production ERP', verbose_name='release fence', max_digits=15, null=True)),
                ('posttime', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='A delay time to be respected as a soft constraint after ending the operation', verbose_name='post-op time', max_digits=15, null=True)),
                ('sizeminimum', models.DecimalField(blank=True, max_digits=15, decimal_places=4, help_text='A minimum quantity for operationplans', verbose_name='size minimum', default='1.0', null=True)),
                ('sizemultiple', models.DecimalField(blank=True, decimal_places=4, help_text='A multiple quantity for operationplans', verbose_name='size multiple', max_digits=15, null=True)),
                ('sizemaximum', models.DecimalField(blank=True, decimal_places=4, help_text='A maximum quantity for operationplans', verbose_name='size maximum', max_digits=15, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=4, help_text='Cost per operationplan unit', verbose_name='cost', max_digits=15, null=True)),
                ('duration', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='A fixed duration for the operation', verbose_name='duration', max_digits=15, null=True)),
                ('duration_per', freppledb.common.fields.DurationField(blank=True, decimal_places=4, help_text='A variable duration for the operation', verbose_name='duration per unit', max_digits=15, null=True)),
                ('search', models.CharField(max_length=20, choices=[('PRIORITY', 'priority'), ('MINCOST', 'minimum cost'), ('MINPENALTY', 'minimum penalty'), ('MINCOSTPENALTY', 'minimum cost plus penalty')], blank=True, verbose_name='search mode', help_text='Method to select preferred alternate', null=True)),
                ('location', models.ForeignKey(blank=True, to='input.Location', verbose_name='location', null=True)),
            ],
            options={
                'db_table': 'operation',
                'verbose_name': 'operation',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'operations',
            },
        ),
        migrations.CreateModel(
            name='OperationPlan',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.IntegerField(primary_key=True, verbose_name='identifier', serialize=False, help_text='Unique identifier of an operationplan')),
                ('status', models.CharField(max_length=20, choices=[('confirmed', 'confirmed'), ('approved', 'approved'), ('proposed', 'proposed')], blank=True, verbose_name='status', help_text='Status of the order', null=True)),
                ('reference', models.CharField(max_length=60, blank=True, verbose_name='reference', null=True, help_text='External reference of this order')),
                ('quantity', models.DecimalField(max_digits=15, verbose_name='quantity', default='1.00', decimal_places=4)),
                ('startdate', models.DateTimeField(blank=True, verbose_name='start date', null=True, help_text='start date')),
                ('enddate', models.DateTimeField(blank=True, verbose_name='end date', null=True, help_text='end date')),
                ('criticality', models.DecimalField(blank=True, verbose_name='criticality', max_digits=15, null=True, decimal_places=4)),
                ('operation', models.ForeignKey(verbose_name='operation', to='input.Operation')),
                ('owner', models.ForeignKey(blank=True, to='input.OperationPlan', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True)),
            ],
            options={
                'db_table': 'operationplan',
                'verbose_name': 'operationplan',
                'abstract': False,
                'ordering': ['id'],
                'verbose_name_plural': 'operationplans',
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.IntegerField(primary_key=True, verbose_name='identifier', serialize=False, help_text='Unique identifier')),
                ('reference', models.CharField(max_length=60, blank=True, verbose_name='reference', null=True, help_text='External reference of this order')),
                ('status', models.CharField(max_length=20, choices=[('confirmed', 'confirmed'), ('proposed', 'proposed'), ('approved', 'approved')], blank=True, verbose_name='status', help_text='Status of the order', null=True)),
                ('quantity', models.DecimalField(max_digits=15, verbose_name='quantity', default='1.00', decimal_places=4)),
                ('startdate', models.DateTimeField(blank=True, verbose_name='start date', null=True, help_text='start date')),
                ('enddate', models.DateTimeField(blank=True, verbose_name='end date', null=True, help_text='end date')),
                ('criticality', models.DecimalField(blank=True, verbose_name='criticality', max_digits=15, null=True, decimal_places=4)),
                ('item', models.ForeignKey(verbose_name='item', to='input.Item')),
                ('location', models.ForeignKey(verbose_name='location', to='input.Location')),
            ],
            options={
                'db_table': 'purchase_order',
                'verbose_name': 'purchase order',
                'abstract': False,
                'ordering': ['id'],
                'verbose_name_plural': 'purchase orders',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('lft', models.PositiveIntegerField(blank=True, editable=False, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('lvl', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('type', models.CharField(max_length=20, choices=[('default', 'Default'), ('buckets', 'Buckets'), ('infinite', 'Infinite')], blank=True, verbose_name='type', default='default', null=True)),
                ('maximum', models.DecimalField(blank=True, max_digits=15, decimal_places=4, help_text='Size of the resource', verbose_name='maximum', default='1.00', null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=4, help_text='Cost for using 1 unit of the resource for 1 hour', verbose_name='cost', max_digits=15, null=True)),
                ('maxearly', freppledb.common.fields.DurationField(blank=True, decimal_places=0, help_text='Time window before the ask date where we look for available capacity', verbose_name='max early', max_digits=15, null=True)),
                ('setup', models.CharField(max_length=60, blank=True, verbose_name='setup', null=True, help_text='Setup of the resource at the start of the plan')),
                ('location', models.ForeignKey(blank=True, to='input.Location', verbose_name='location', null=True)),
                ('maximum_calendar', models.ForeignKey(blank=True, to='input.Calendar', help_text='Calendar defining the resource size varying over time', verbose_name='maximum calendar', null=True)),
                ('owner', models.ForeignKey(blank=True, to='input.Resource', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True)),
            ],
            options={
                'db_table': 'resource',
                'verbose_name': 'resource',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'resources',
            },
        ),
        migrations.CreateModel(
            name='ResourceSkill',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.AutoField(primary_key=True, verbose_name='identifier', serialize=False)),
                ('effective_start', models.DateTimeField(blank=True, verbose_name='effective start', null=True, help_text='Validity start date')),
                ('effective_end', models.DateTimeField(blank=True, verbose_name='effective end', null=True, help_text='Validity end date')),
                ('priority', models.IntegerField(blank=True, verbose_name='priority', default=1, null=True, help_text='Priority of this skill in a group of alternates')),
                ('resource', models.ForeignKey(to='input.Resource', related_name='skills', verbose_name='resource')),
            ],
            options={
                'db_table': 'resourceskill',
                'abstract': False,
                'verbose_name_plural': 'resource skills',
                'verbose_name': 'resource skill',
                'ordering': ['resource', 'skill'],
            },
        ),
        migrations.CreateModel(
            name='SetupMatrix',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False)),
            ],
            options={
                'db_table': 'setupmatrix',
                'verbose_name': 'setup matrix',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'setup matrices',
            },
        ),
        migrations.CreateModel(
            name='SetupRule',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', serialize=False, auto_created=True)),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('priority', models.IntegerField(verbose_name='priority')),
                ('fromsetup', models.CharField(max_length=60, blank=True, verbose_name='from setup', null=True, help_text='Name of the old setup (wildcard characters are supported)')),
                ('tosetup', models.CharField(max_length=60, blank=True, verbose_name='to setup', null=True, help_text='Name of the new setup (wildcard characters are supported)')),
                ('duration', freppledb.common.fields.DurationField(blank=True, decimal_places=0, help_text='Duration of the changeover', verbose_name='duration', max_digits=15, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=4, help_text='Cost of the conversion', verbose_name='cost', max_digits=15, null=True)),
                ('setupmatrix', models.ForeignKey(to='input.SetupMatrix', related_name='rules', verbose_name='setup matrix')),
            ],
            options={
                'db_table': 'setuprule',
                'abstract': False,
                'verbose_name_plural': 'setup matrix rules',
                'verbose_name': 'setup matrix rule',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
            ],
            options={
                'db_table': 'skill',
                'verbose_name': 'skill',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'skills',
            },
        ),
        migrations.CreateModel(
            name='SubOperation',
            fields=[
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('id', models.AutoField(primary_key=True, verbose_name='identifier', serialize=False)),
                ('priority', models.IntegerField(verbose_name='priority', default=1, help_text='Sequence of this operation among the suboperations. Negative values are ignored.')),
                ('effective_start', models.DateTimeField(blank=True, verbose_name='effective start', null=True, help_text='Validity start date')),
                ('effective_end', models.DateTimeField(blank=True, verbose_name='effective end', null=True, help_text='Validity end date')),
                ('operation', models.ForeignKey(to='input.Operation', help_text='Parent operation', related_name='suboperations', verbose_name='operation')),
                ('suboperation', models.ForeignKey(to='input.Operation', help_text='Child operation', related_name='superoperations', verbose_name='suboperation')),
            ],
            options={
                'db_table': 'suboperation',
                'verbose_name': 'suboperation',
                'abstract': False,
                'ordering': ['operation', 'priority', 'suboperation'],
                'verbose_name_plural': 'suboperations',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('lft', models.PositiveIntegerField(blank=True, editable=False, null=True, db_index=True)),
                ('rght', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('lvl', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(primary_key=True, max_length=60, verbose_name='name', serialize=False, help_text='Unique identifier')),
                ('source', models.CharField(max_length=20, blank=True, verbose_name='source', null=True, db_index=True)),
                ('lastmodified', models.DateTimeField(verbose_name='last modified', default=django.utils.timezone.now, editable=False, db_index=True)),
                ('description', models.CharField(max_length=200, blank=True, verbose_name='description', null=True)),
                ('category', models.CharField(max_length=20, blank=True, verbose_name='category', null=True, db_index=True)),
                ('subcategory', models.CharField(max_length=20, blank=True, verbose_name='subcategory', null=True, db_index=True)),
                ('owner', models.ForeignKey(blank=True, to='input.Supplier', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True)),
            ],
            options={
                'db_table': 'supplier',
                'verbose_name': 'supplier',
                'abstract': False,
                'ordering': ['name'],
                'verbose_name_plural': 'suppliers',
            },
        ),
        migrations.AddField(
            model_name='resourceskill',
            name='skill',
            field=models.ForeignKey(to='input.Skill', related_name='resources', verbose_name='skill'),
        ),
        migrations.AddField(
            model_name='resource',
            name='setupmatrix',
            field=models.ForeignKey(blank=True, to='input.SetupMatrix', help_text='Setup matrix defining the conversion time and cost', verbose_name='setup matrix', null=True),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier',
            field=models.ForeignKey(verbose_name='supplier', to='input.Supplier'),
        ),
        migrations.AddField(
            model_name='load',
            name='operation',
            field=models.ForeignKey(to='input.Operation', related_name='loads', verbose_name='operation'),
        ),
        migrations.AddField(
            model_name='load',
            name='resource',
            field=models.ForeignKey(to='input.Resource', related_name='loads', verbose_name='resource'),
        ),
        migrations.AddField(
            model_name='load',
            name='skill',
            field=models.ForeignKey(blank=True, to='input.Skill', related_name='loads', verbose_name='skill', null=True),
        ),
        migrations.AddField(
            model_name='itemsupplier',
            name='location',
            field=models.ForeignKey(blank=True, to='input.Location', related_name='itemsuppliers', verbose_name='location', null=True),
        ),
        migrations.AddField(
            model_name='itemsupplier',
            name='supplier',
            field=models.ForeignKey(to='input.Supplier', related_name='suppliers', verbose_name='supplier'),
        ),
        migrations.AddField(
            model_name='itemdistribution',
            name='location',
            field=models.ForeignKey(blank=True, to='input.Location', related_name='itemdistributions_destination', verbose_name='location', null=True),
        ),
        migrations.AddField(
            model_name='itemdistribution',
            name='origin',
            field=models.ForeignKey(to='input.Location', related_name='itemdistributions_origin', verbose_name='origin'),
        ),
        migrations.AddField(
            model_name='item',
            name='operation',
            field=models.ForeignKey(blank=True, to='input.Operation', help_text='Default operation used to ship a demand for this item', verbose_name='delivery operation', null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='owner',
            field=models.ForeignKey(blank=True, to='input.Item', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True),
        ),
        migrations.AddField(
            model_name='flow',
            name='operation',
            field=models.ForeignKey(to='input.Operation', related_name='flows', verbose_name='operation'),
        ),
        migrations.AddField(
            model_name='flow',
            name='thebuffer',
            field=models.ForeignKey(to='input.Buffer', related_name='flows', verbose_name='buffer'),
        ),
        migrations.AddField(
            model_name='distributionorder',
            name='destination',
            field=models.ForeignKey(to='input.Location', related_name='destinations', verbose_name='destination'),
        ),
        migrations.AddField(
            model_name='distributionorder',
            name='item',
            field=models.ForeignKey(verbose_name='item', to='input.Item'),
        ),
        migrations.AddField(
            model_name='distributionorder',
            name='origin',
            field=models.ForeignKey(blank=True, to='input.Location', related_name='origins', verbose_name='origin', null=True),
        ),
        migrations.AddField(
            model_name='demand',
            name='item',
            field=models.ForeignKey(blank=True, to='input.Item', verbose_name='item', null=True),
        ),
        migrations.AddField(
            model_name='demand',
            name='location',
            field=models.ForeignKey(blank=True, to='input.Location', verbose_name='location', null=True),
        ),
        migrations.AddField(
            model_name='demand',
            name='operation',
            field=models.ForeignKey(blank=True, to='input.Operation', help_text='Operation used to satisfy this demand', related_name='used_demand', verbose_name='delivery operation', null=True),
        ),
        migrations.AddField(
            model_name='demand',
            name='owner',
            field=models.ForeignKey(blank=True, to='input.Demand', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='item',
            field=models.ForeignKey(to='input.Item', verbose_name='item', null=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='location',
            field=models.ForeignKey(blank=True, to='input.Location', verbose_name='location', null=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='minimum_calendar',
            field=models.ForeignKey(blank=True, to='input.Calendar', help_text='Calendar storing a time-dependent safety stock profile', verbose_name='minimum calendar', null=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='owner',
            field=models.ForeignKey(blank=True, to='input.Buffer', help_text='Hierarchical parent', related_name='xchildren', verbose_name='owner', null=True),
        ),
        migrations.AddField(
            model_name='buffer',
            name='producing',
            field=models.ForeignKey(blank=True, to='input.Operation', help_text='Operation to replenish the buffer', related_name='used_producing', verbose_name='producing', null=True),
        ),
        migrations.AlterUniqueTogether(
            name='setuprule',
            unique_together=set([('setupmatrix', 'priority')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourceskill',
            unique_together=set([('resource', 'skill')]),
        ),
        migrations.AlterUniqueTogether(
            name='load',
            unique_together=set([('operation', 'resource')]),
        ),
        migrations.AlterUniqueTogether(
            name='itemsupplier',
            unique_together=set([('item', 'location', 'supplier', 'effective_start')]),
        ),
        migrations.AlterUniqueTogether(
            name='itemdistribution',
            unique_together=set([('item', 'location', 'origin', 'effective_start')]),
        ),
        migrations.AlterUniqueTogether(
            name='flow',
            unique_together=set([('operation', 'thebuffer')]),
        ),
        migrations.RunPython(loadParameters),
    ]
