/***************************************************************************
 *                                                                         *
 * Copyright (C) 2012-2013 by Johan De Taeye, frePPLe bvba                 *
 *                                                                         *
 * You should never have received this file!                               *
 *                                                                         *
 ***************************************************************************/

#define FREPPLE_CORE
#include "frepple/utils.h"

#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/ssl.h>

using namespace frepple;
using namespace frepple::utils;


/** This program prompts the user for a number of input parameters
  * and writes out a signed frePPLe license XML-file.
  * Yup, top-secret stuff :-)
  */
int main(int argc, char* argv[])
{
  int err;
  unsigned int sig_len;
  unsigned char sig_buf [4096];

  // Load the crypto library error strings.
  ERR_load_crypto_strings();

  // Private key
  unsigned char private_key[1193]={
  0x30,0x82,0x04,0xA5,0x02,0x01,0x00,0x02,0x82,0x01,0x01,0x00,0xCC,0x9F,0x8B,0xF9,
  0xEF,0xC1,0x06,0x81,0x5E,0x88,0xBF,0x94,0xE3,0xB0,0x86,0x05,0x1E,0x57,0xFE,0xBC,
  0x5D,0x6D,0x79,0xD6,0xAA,0xC7,0x15,0x2A,0x49,0x89,0xCF,0x39,0x6D,0x80,0xF7,0xA4,
  0xD3,0x4D,0xD6,0xFA,0xED,0x0E,0x7B,0xE8,0x19,0xBF,0x3A,0x8D,0xF9,0xB5,0x0D,0xC4,
  0x75,0xC6,0x7A,0xAE,0x59,0x30,0x06,0x37,0x49,0x25,0x7B,0xF9,0xE8,0x95,0x00,0x71,
  0x77,0x11,0x5D,0x55,0xC7,0xC3,0xFA,0x5A,0x24,0xC2,0x25,0x15,0xCB,0x7E,0x32,0xE0,
  0x1B,0xA7,0x6F,0x75,0xFF,0x84,0xE4,0x91,0x04,0xC2,0x58,0xF0,0x42,0x06,0x48,0xA0,
  0x09,0x5B,0xB6,0xDF,0x19,0xAF,0x62,0x6F,0x2C,0x8D,0xA9,0x8A,0x5E,0xEF,0x6D,0x54,
  0x7E,0x58,0x56,0x31,0xB7,0xAA,0x5A,0xAD,0xD2,0x86,0x7C,0xD4,0xFA,0xE3,0x17,0xDE,
  0x09,0x8F,0x54,0xD3,0xEA,0x27,0xF0,0x97,0x4C,0x49,0xE5,0x41,0xD2,0xC7,0xF6,0x85,
  0x92,0x20,0xA5,0x06,0x85,0x4E,0x14,0x10,0xAF,0x76,0x3A,0xAE,0xD4,0x20,0x5C,0xF0,
  0x88,0xB5,0xDC,0x99,0x73,0xC1,0x30,0x58,0xBF,0xF5,0x88,0x87,0xA6,0x8B,0x06,0x65,
  0x50,0xD2,0x59,0x33,0x46,0x59,0x6D,0x12,0x02,0xF0,0xA3,0x01,0x15,0xFB,0x1E,0x9E,
  0xA4,0xDE,0x4B,0xAC,0x59,0xBC,0x88,0x0A,0x85,0x91,0x7C,0x0A,0x3B,0x8B,0x35,0x1E,
  0x68,0x5F,0x2F,0x3E,0x00,0xB9,0x29,0x53,0xDA,0x6F,0x54,0x71,0x48,0x97,0xE1,0xBA,
  0x2E,0xD5,0xAE,0xE4,0x60,0x58,0x86,0xAD,0x27,0xE9,0xFB,0x0F,0x85,0xCF,0xA3,0xEC,
  0x66,0x2D,0x2A,0x72,0x66,0xC6,0x48,0x93,0x30,0x6B,0xAD,0x01,0x02,0x03,0x01,0x00,
  0x01,0x02,0x82,0x01,0x01,0x00,0xC0,0xA9,0x70,0x58,0x52,0x1F,0xC2,0x8A,0x48,0x82,
  0x25,0x30,0x80,0xF9,0x92,0x16,0x7B,0xAD,0x8A,0x91,0xBC,0xBD,0xF9,0x3B,0xDF,0xEC,
  0x36,0xC7,0x6C,0x1A,0x2F,0x5C,0xF8,0xF7,0xB7,0x34,0x20,0x28,0x68,0x44,0x36,0xB3,
  0xAE,0x82,0xA8,0xCB,0x5E,0xCC,0x92,0xD2,0xA0,0x35,0xDC,0x56,0x96,0xE8,0x55,0xDD,
  0x5B,0xDC,0xEE,0x28,0x37,0x04,0xE4,0xB2,0x76,0x8A,0x5E,0xFB,0xA0,0x8F,0xC5,0xD9,
  0x86,0x7D,0x1D,0xA3,0x16,0xDB,0xE0,0x8F,0xE0,0x43,0x16,0x86,0x9D,0xF1,0xD2,0x36,
  0x44,0x27,0x2E,0xFD,0xF6,0x53,0xB1,0x36,0xCD,0x66,0xB1,0xA9,0x03,0x14,0x28,0xD0,
  0xF3,0xB3,0x8D,0x95,0x8C,0x8E,0x56,0x38,0xC5,0x0E,0x0B,0x30,0x0D,0x68,0x1E,0x70,
  0x6D,0x94,0xC0,0x66,0x14,0x5D,0x9C,0x85,0xB5,0xFB,0x7F,0x99,0x33,0x5E,0xEC,0x90,
  0xE9,0x38,0xF3,0x76,0x6F,0xEE,0xE1,0x7B,0x22,0xA3,0xBC,0xA5,0xD8,0x79,0xE9,0x57,
  0x6C,0x80,0x0F,0x67,0x08,0x58,0x0A,0x38,0xFA,0x4A,0xE6,0x7C,0x9F,0xE0,0xEA,0x53,
  0xC9,0xE3,0x85,0x19,0xCE,0xB3,0xC2,0xBE,0x34,0x20,0xEF,0xE1,0xBA,0x76,0x72,0xE0,
  0x01,0x59,0x6B,0x59,0x13,0x13,0x66,0x28,0xC6,0x46,0x97,0x42,0x30,0xD2,0x06,0xD1,
  0xF8,0xC1,0x41,0xFB,0x19,0x7D,0xFD,0xCF,0x07,0xF5,0x02,0x6C,0xE8,0xC7,0x84,0x79,
  0x4D,0x7F,0x9E,0x6A,0x93,0xA2,0xAA,0x46,0xC9,0xF6,0x4B,0x6E,0x2C,0xAE,0x5A,0x82,
  0xE5,0xF0,0x33,0xD2,0xCA,0x7B,0x86,0x1F,0xE8,0x32,0x6B,0x14,0x74,0x6E,0x33,0xFD,
  0xCA,0xDB,0x5D,0x3B,0x79,0x81,0x02,0x81,0x81,0x00,0xF1,0x7D,0x8F,0x58,0x09,0xC8,
  0xE6,0x2E,0xE2,0x95,0x10,0xCA,0x87,0x6E,0xAD,0x3A,0x9B,0x26,0xA8,0x8F,0xE0,0x85,
  0x80,0xC4,0x7E,0x55,0xE8,0x6E,0xEE,0xB1,0xC0,0x8E,0xC2,0x21,0x6F,0xC1,0x3D,0xAB,
  0x6C,0xD4,0xB8,0xD8,0x54,0x8B,0x19,0x37,0x5B,0xF7,0x2A,0x80,0x46,0x97,0xE5,0xE5,
  0x87,0x92,0x5A,0xF5,0xF9,0xA4,0x67,0x9A,0xAF,0xE7,0x0B,0x4A,0xCE,0x32,0xBC,0xFC,
  0x3E,0x75,0x53,0x0F,0xB5,0x10,0x84,0xEE,0x08,0x27,0x2B,0x82,0x53,0xF8,0xA6,0x87,
  0xF4,0x41,0xE3,0xC1,0x74,0x24,0x24,0xB8,0x1F,0x75,0xEB,0xFD,0x3B,0x90,0x2F,0x59,
  0xAA,0xC1,0x27,0xE1,0x5D,0xE3,0x3A,0x9D,0xF7,0x85,0x1B,0x48,0x13,0x6F,0x61,0x79,
  0x6D,0x26,0x77,0xEF,0xE8,0x94,0xFE,0xAC,0x57,0xF9,0x02,0x81,0x81,0x00,0xD8,0xEA,
  0xEB,0x9D,0x48,0x8C,0x7E,0xE3,0xF5,0x18,0x98,0x9D,0xF1,0x9F,0x96,0x7F,0x3D,0xE5,
  0x02,0xCA,0x35,0xC2,0xB7,0x32,0xA0,0xC3,0xC1,0xA0,0x53,0x84,0xED,0xA1,0x0A,0xFA,
  0xF3,0x2D,0x0C,0xB2,0x2C,0xEF,0x4B,0x83,0x92,0x3B,0xA9,0x9F,0xF6,0xCA,0x69,0x3B,
  0x5E,0x51,0xD8,0x24,0x20,0xC2,0xA0,0x56,0x26,0x32,0xC0,0x17,0x5A,0x29,0x71,0xE6,
  0x45,0x38,0xFE,0xAC,0x39,0xDA,0xA7,0x0A,0x05,0xBC,0x2A,0xC9,0xB0,0x78,0x5A,0x40,
  0x33,0x04,0x93,0x02,0xAF,0xEF,0x5F,0x16,0x15,0xAE,0x71,0xE0,0x0E,0x0D,0xB7,0x49,
  0xEC,0x2E,0x70,0x8B,0x02,0x55,0xB8,0xD2,0x3A,0xD6,0xE1,0x53,0xF4,0x03,0xD2,0x42,
  0x01,0x81,0x8B,0x1F,0xF4,0xCF,0xD5,0xCB,0xBB,0xF2,0xC6,0xD7,0x0F,0x49,0x02,0x81,
  0x81,0x00,0xBD,0x17,0xB9,0x47,0x91,0x99,0xDB,0x0B,0xF9,0x66,0x09,0xD8,0xDC,0x85,
  0x80,0x65,0x74,0x99,0xA7,0xC1,0xC9,0x68,0x20,0x35,0x3C,0x4B,0x9E,0x8E,0x46,0x9F,
  0xAF,0x0C,0xD9,0xDB,0xFE,0xBB,0x0C,0xC4,0x0F,0x9A,0xDE,0x06,0x9E,0xE4,0xB0,0x61,
  0x15,0xC5,0x0B,0x65,0x98,0x61,0x56,0xA6,0x0D,0x2B,0x3F,0xC8,0x7D,0xAB,0x0B,0x69,
  0x27,0xB5,0xBD,0xB4,0xDC,0x93,0x04,0x42,0x6B,0xD1,0xC8,0xB1,0x72,0xF1,0x35,0x75,
  0x81,0xB2,0xD2,0x31,0xE1,0xF8,0xC0,0xC5,0x92,0x30,0x89,0xDB,0xB0,0x4A,0xA0,0xE9,
  0xFF,0xD0,0x81,0x72,0x2F,0xD2,0xAE,0x11,0x03,0x50,0xEE,0x1E,0x5D,0x3B,0x11,0x6A,
  0x22,0x27,0xFA,0xFD,0xCC,0x22,0x19,0xEC,0x4F,0xD8,0xA0,0x6F,0x9D,0xEA,0x15,0x24,
  0xF4,0x59,0x02,0x81,0x81,0x00,0x94,0x51,0x54,0xD7,0x4F,0x82,0xD9,0x44,0x6F,0x12,
  0xE9,0x4F,0x9D,0xA5,0xDC,0x16,0x96,0xB0,0x9F,0x0E,0xBA,0x61,0xB0,0x37,0xCA,0xDA,
  0xEE,0xEA,0xFC,0x10,0x79,0x16,0xD3,0x56,0x31,0xAE,0x0C,0xEF,0x4B,0x70,0x37,0x76,
  0xF8,0x27,0x19,0x5D,0x8A,0x36,0x6E,0x6B,0xAC,0x9B,0x53,0xA9,0xA8,0x48,0xCB,0xAE,
  0xFC,0x21,0x59,0x5C,0xDE,0x46,0x56,0x5D,0xF7,0xD8,0xF7,0xB1,0xB5,0x41,0x3F,0x53,
  0xC8,0x06,0x18,0x4F,0x9D,0xFD,0x3C,0xE0,0x86,0xC1,0xCA,0xEF,0x5C,0x72,0xD4,0xD6,
  0x59,0xEE,0xD4,0x68,0x39,0xD3,0xC1,0x0E,0xA7,0x92,0x3D,0x5B,0x9F,0x36,0x13,0xD0,
  0x93,0x70,0xD7,0xD3,0x3A,0x96,0xDE,0x4E,0x49,0x8F,0x55,0x1C,0x7D,0x9D,0x1A,0x77,
  0x5A,0xC4,0xAE,0x96,0xE0,0x19,0x02,0x81,0x80,0x6B,0x44,0x79,0xAD,0x5E,0x1E,0x34,
  0x2A,0x00,0x48,0xA4,0xCF,0x7B,0x2B,0xEF,0xDF,0x66,0xF5,0x4D,0xCD,0x09,0xED,0xFE,
  0x16,0xD9,0xC0,0x79,0xE8,0x86,0x4F,0x93,0x84,0x65,0xEA,0x62,0x9B,0x67,0x57,0xDF,
  0x99,0xE5,0x5D,0x39,0x4C,0xC7,0x9F,0x63,0xE6,0xE9,0x6B,0x60,0x78,0x99,0xE4,0xCE,
  0xE9,0xF3,0xA4,0xDB,0xF2,0x8F,0xBA,0x93,0x95,0x85,0x84,0xE9,0x2C,0x69,0x41,0x32,
  0xD1,0xD3,0xA7,0x72,0xD4,0x65,0x48,0xFD,0x6F,0x5F,0x6F,0x3F,0x73,0x32,0x0F,0xF8,
  0xB6,0xAF,0x9B,0x4F,0x8B,0xDF,0x5B,0x3C,0x04,0x8C,0x13,0xB8,0x6F,0xAD,0xED,0x1D,
  0x34,0x51,0xD7,0xBD,0x4A,0xEB,0x06,0xD8,0x5B,0xBD,0xA7,0xC8,0x5A,0xCE,0x52,0x89,
  0xFE,0x03,0x3B,0x3D,0x57,0x72,0x1D,0x69,0xB3,
  };

  // Build private key from data structure
  RSA *rsa;
  const unsigned char *p = private_key;
  rsa = d2i_RSAPrivateKey(NULL, &p, (long)sizeof(private_key));
  if (rsa == NULL)
  {
	  ERR_print_errors_fp (stderr);
	  exit (1);
  }

  // Prompt the user for input
  string customer;
  while (customer.empty())
  {
    cout << "\nCustomer name: ";
    getline(cin, customer);
  }
  string email;
  while (email.empty())
  {
    cout << "\nEmail: ";
    getline(cin, email);
  }
  string stringfrom;
  Date datefrom = Date::now();
  datefrom -= datefrom.getSecondsDay() + 86400;
  cout << "\nValid from (" << datefrom << "): ";
  getline(cin, stringfrom);
  if (stringfrom.empty()) stringfrom = string(datefrom);
  string stringtill;
  Date datetill = Date::now();
  datetill = datefrom + TimePeriod(86400*(365+90));
  datetill -= datetill.getSecondsMonth();
  cout << "\nValid till (" << datetill << "): ";
  getline(cin, stringtill);
  if (stringtill.empty()) stringtill = string(datetill);

  // Initialize the signature
  EVP_PKEY *evpKey = 0;
  EVP_MD_CTX ctx;
  evpKey = EVP_PKEY_new();
  EVP_PKEY_set1_RSA(evpKey, rsa);
  EVP_SignInit(&ctx, EVP_sha1());

  // Add all data to be signed
  EVP_SignUpdate(&ctx, customer.c_str(), customer.size());
  EVP_SignUpdate(&ctx, email.c_str(), email.size());
  EVP_SignUpdate(&ctx, stringfrom.c_str(), stringfrom.size());
  EVP_SignUpdate(&ctx, stringtill.c_str(), stringtill.size());

  // Finalize the signature
  err = EVP_SignFinal(&ctx, sig_buf, &sig_len, evpKey);
  if (err != 1)
  {
    ERR_print_errors_fp(stderr);
    exit (1);
  }

  // Encode the signature in base64
  string signature = Decryptor::base64(sig_buf, sig_len);

  // Write out the license file
  cout << endl << "License:" << endl << endl;
  cout << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << endl;
  cout << "<license>" << endl;
  cout << "<!-- " << endl;
  cout << "This is a license file for the frePPLe enterprise edition." << endl;
  cout << "Contact support@frepple.com with any issues or questions." << endl;
  cout << "-->" << endl;
  cout << "<customer>" << customer << "</customer>" << endl;
  cout << "<email>" << email << "</email>" << endl;
  cout << "<valid_from>" << stringfrom << "</valid_from>" << endl;
  cout << "<valid_till>" << stringtill << "</valid_till>" << endl;
  cout << "<signature>" << signature << "</signature>" << endl;
  cout << "</license>" << endl << endl;

  // Finalize
  EVP_PKEY_free (evpKey);
  RSA_free(rsa);
  ERR_free_strings();
  return 0;
}

