#
# Process this file with autoconf to produce a configure script.
#

#
# Copyright (C) 2007-2014 by Johan De Taeye, frePPLe bvba
#
# All information contained herein is, and remains the property of frePPLe.
# You are allowed to use and modify the source code, as long as the software is used
# within your company.
# You are not allowed to distribute the software, either in the form of source code
# or in the form of compiled binaries.
#

#
# Initialization
#
AC_PREREQ(2.60)
AC_INIT([frepple], [2.4.1])
AC_CONFIG_SRCDIR([src/main.cpp])
AC_CONFIG_HEADER([config.h])
AM_INIT_AUTOMAKE([1.9 tar-ustar])

#
# Checks for programs and initialize libtool
#
AC_GNU_SOURCE
LT_INIT([disable-static], [win32-dll], [dlopen])
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_LANG(C++)
AC_LANG_COMPILER_REQUIRE
AC_PROG_LIBTOOL

# Note: the library version number and the package version number are
# INDEPENDENT. The library version is the concatenation of LIBCURRENT,
# LIBREVISION and LIBAGE (in this order and separated by a colon).
# Use the following rules for updating the numbering scheme.
# 1) Increment LIBREVISION if source code has changed at all
# 2) If the API has changed, increment LIBCURRENT and set LIBREVISION to 0
# 3) If the API changes compatibly (i.e. simply adding a new function
#    without changing or removing earlier interfaces), then increment LIBAGE.
# 4) If the API changes incompatibly set LIBAGE back to 0
LIBRARY_VERSION=[0:0:0]
AC_SUBST(LIBRARY_VERSION)

#
# Define an extra configure argument to enable debugging
#
AC_ARG_ENABLE(debug,
AS_HELP_STRING([--enable-debug],[Turn on debugging]),
[case "${enableval}" in
  yes) debug=true ;;
  no)  debug=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
esac],[debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

#
# Define an extra configure argument to compile for test coverage measurement
# This works only with the gcov tool and the gcc compiler
#
AC_ARG_ENABLE(coverage,
AS_HELP_STRING([--enable-coverage],
[Compile for test coverage measurement (GCC only, using gcov)]),
[case "${enableval}" in
  yes) coverage=true
       AC_CHECK_PROGS(GCOV, gcov, nogcov)
       if test x$GCOV = xnogcov
       then
          AC_MSG_ERROR([Could not find gcov, no coverage build is possible])
       fi
       ;;
  no)  coverage=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-coverage]) ;;
esac],[coverage=false])
AM_CONDITIONAL(COVERAGE, test x$coverage = xtrue)

#
# Define an extra configure argument to compile an executable suitable for
# profiling. This compiler settings work only with the gcc compiler.
# Valgrind is highly recommended as the profiling tool. (gprof doesn't do
# trick because frePPLe uses shared libraries)
#
AC_ARG_ENABLE(profile,
AS_HELP_STRING([--enable-profile],
[Compile for profiling (GCC only)]),
[case "${enableval}" in
  yes) profile=true ;;
  no)  profile=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-profile]) ;;
esac],[profile=false])
AM_CONDITIONAL(PROFILE, test x$profile = xtrue)

#
# Define an extra configure argument to enable building the license key tools
#
AC_ARG_ENABLE(license,
AC_HELP_STRING([--enable-license],
[Build the tools to create and validate license keys (default: false)]),
[case "${enableval}" in
  yes) lic=true ;;
  no)  lic=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-license]) ;;
esac], [lic=false])
AM_CONDITIONAL(LICENSE, test x$lic = xtrue)

#
# Define a configure argument to enable/disable building of the documentation
#
AC_ARG_ENABLE([doc],
AS_HELP_STRING([--enable-doc],
[Enable documentation generation(default false)]),
[case "${enableval}" in
  no)  generatedoc=false;;
  yes) generatedoc=true
       AC_CHECK_PROGS(DOXYGEN, doxygen, notavailable)
       AC_CHECK_PROGS(SPHINXBUILD, sphinx-build, notavailable)
       if test x$SPHINXBUILD = xnotavailable
       then
          AC_MSG_ERROR([Could not find sphinx-build, no documentation can be built])
          generatedoc=false
       fi
       ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-doc]) ;;
esac],[generatedoc=false])
AM_CONDITIONAL(DOC, test x$generatedoc = xtrue)

#
# Define a configure argument to pass python installation parameters
#
AC_ARG_VAR([PYFLAGS],
[Argument passed to setup.py when installing frePPLe's Python application.])

# Check the availability of the external programs
AC_CHECK_PROG(HAVE_DOT, dot, [YES], [NO])

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h stdlib.h unistd.h perl.h python.h pthread.h])

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([dup2 memset strncasecmp strnicmp strptime putenv _putenv localtime_r])

# Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_HEADERS([ext/slist slist vector map set stack])
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_TM

# Verify support for namespaces
AC_TRY_COMPILE(
  [namespace Outer { namespace Inner { int i = 0; }}],
  [using namespace Outer::Inner; return i;],
  [],
  [AC_MSG_ERROR([
  This package requires a C++ compiler that supports namespaces.
  ])])

#
# Verify installation of OPENSSL
#
AC_CHECK_HEADER([openssl/rsa.h], [],
[AC_MSG_ERROR([
  This package requires the OPENSSL package...
  Please install this package and its development libraries.
])])
AC_CHECK_LIB([crypto], [RSA_generate_key], [],
[AC_MSG_ERROR([
  This package requires the OPENSSL package...
  Please install this package and its development libraries.
])])

#
# Verify installation of XERCES-C
#
AC_CHECK_HEADER([xercesc/util/XercesDefs.hpp], [],
[AC_MSG_ERROR([
  This package requires the XERCES-C XML parser...
  Please install this package and its development libraries.
  Check out http://xml.apache.org/xerces-c for more information.
])])
AC_CHECK_LIB([xerces-c], [main], [],
[AC_MSG_ERROR([
  This package requires the XERCES-C XML parser...
  Please install this package and its development libraries.
  Check out http://xml.apache.org/xerces-c for more information.
])])

AC_CHECKING([for xerces-c version >= 2.8 ])
AC_COMPILE_IFELSE([AC_LANG_SOURCE([
  #include "xercesc/util/XercesVersion.hpp"
  #if (XERCES_VERSION_MAJOR==2 && XERCES_VERSION_MINOR>=8) || XERCES_VERSION_MAJOR==3
    int main (void) {return 1;}
  #else
    force compile error;
  #endif
  ])], [],
  [AC_MSG_ERROR([
  This package requires Xerces-C 2.8 or later. Your version is older...
  ])])

#
# Verify installation of PYTHON
# Edit the minimum required version to 3.0 to switch to using Python 3.
#
AM_PATH_PYTHON([2.6], [],
[AC_MSG_ERROR([
  This package requires Python 2.6 or higher.
  Preferred versions are 2.6 and 2.7.
  Support for Python 3.0 and higher is experimental.
])])
LIBS="-L/usr/lib/python$PYTHON_VERSION/config $LIBS"
CPPFLAGS="-I/usr/include/python$PYTHON_VERSION $CPPFLAGS"
AC_CHECK_LIB(python$PYTHON_VERSION, PyModule_GetDict, [],
[AC_MSG_ERROR([
  Can't link with the Python library.
  This package requires the Python development libraries.
])])
AC_CHECK_HEADER([Python.h], [],
[AC_MSG_ERROR([
  This package requires Python.
  Please install this package and its development libraries.
  Check out http://www.python.org for more information.
])])

#
# Verify installation of django
#
AC_MSG_CHECKING([django Python module])
$PYTHON -c "import django" 2>/dev/null
if test $? -ne 0 ; then
AC_MSG_RESULT([no])
AC_MSG_ERROR([
  This package requires the django web application framework.
  Please install this package from https://www.djangoproject.com/
  and also make sure to apply frePPLe's patches for it.
])
fi
AC_MSG_RESULT([yes])

#
# Check whether we are running on a Windows operating system
#
AC_CHECK_HEADER(windows.h,
[AC_DEFINE(HAVE_WINDOWS_H, 1, [Define to 1 when running on windows platform.])
])

#
# Compiler&linker flags and include&library directories
#
CPPFLAGS="-I\$(top_builddir)/include $CPPFLAGS"
if test x$debug = xtrue ; then
  # The settings on the next line are the normal debugging parameters
  CXXFLAGS="-ggdb -Wall $CXXFLAGS -O0"
  AC_DEFINE([DEBUG], [], [Used for debugging builds])
else if test x$coverage = xtrue ; then
  # The settings on the next line are suitable for creating an executable to
  # be used for code coverage measurement using gcc and gprof.
  CXXFLAGS="-fprofile-arcs -ftest-coverage $CXXFLAGS"
  AC_DEFINE([NDEBUG], [], [Disables assertions])
else if test x$profile = xtrue ; then
  # The settings on the next line are suitable for creating an executable to
  # be used for profiling using gcc.
  # CXXFLAGS="-g -Wall -pg -fno-inline $CXXFLAGS"
  CXXFLAGS="-g -Wall $CXXFLAGS"
  AC_DEFINE([NDEBUG], [], [Disables assertions])
else
  CXXFLAGS="-O3 -s $CXXFLAGS"
  AC_DEFINE([NDEBUG], [], [Disables assertions])
fi ; fi ; fi
case $host_os in
  cygwin*)
    LIBS="-lpthread $LIBS"
    # Linker option to avoid some ugly warnings...
    LDFLAGS="$LDFLAGS -Wl,--enable-auto-import"
    ;;
  *)
    LIBS="-ldl $LIBS"
    CXXFLAGS="-pthread $CXXFLAGS"
    ;;
esac
AM_CONDITIONAL(CYGWIN, test x$host_os = xcygwin)

# Define the output make files
AC_CONFIG_FILES([ Makefile bin/Makefile doc/Makefile ])
AC_CONFIG_FILES([ include/Makefile include/frepple/Makefile ])
AC_CONFIG_FILES([ src/Makefile src/model/Makefile src/solver/Makefile src/utils/Makefile ])
AC_CONFIG_FILES([ modules/Makefile ])
AC_CONFIG_FILES([ contrib/Makefile contrib/vc/Makefile contrib/django/Makefile contrib/installer/Makefile contrib/rpm/Makefile contrib/debian/Makefile contrib/odoo/Makefile ])
AC_CONFIG_FILES([ test/Makefile test/buffer_batch/Makefile test/cluster/Makefile test/custom_fields/Makefile test/calendar/Makefile test/constraints_combined_1/Makefile test/constraints_combined_2/Makefile test/constraints_leadtime_1/Makefile test/constraints_leadtime_2/Makefile test/constraints_material_1/Makefile test/constraints_material_2/Makefile test/constraints_material_3/Makefile test/constraints_material_4/Makefile test/datetime/Makefile test/flow_alternate_1/Makefile test/flow_alternate_2/Makefile test/flow_fixed/Makefile test/scalability_1/Makefile test/scalability_2/Makefile test/scalability_3/Makefile test/jobshop/Makefile test/xml/Makefile test/xml_remote/Makefile  test/constraints_resource_1/Makefile test/constraints_resource_2/Makefile test/constraints_resource_3/Makefile test/constraints_resource_4/Makefile test/constraints_resource_5/Makefile test/constraints_resource_6/Makefile test/criticality/Makefile test/problems/Makefile test/deletion/Makefile test/demand_policy/Makefile test/operation_alternate/Makefile test/operation_available/Makefile test/operation_effective/Makefile test/operation_pre_post/Makefile test/operation_routing/Makefile test/operation_split/Makefile test/multithreading/Makefile test/name/Makefile test/python_1/Makefile test/python_2/Makefile test/python_3/Makefile test/sample_module/Makefile test/callback/Makefile test/pegging/Makefile test/safety_stock/Makefile test/buffer_procure_1/Makefile test/flow_effective/Makefile test/load_alternate/Makefile test/load_effective/Makefile test/setup_1/Makefile test/setup_2/Makefile test/setup_3/Makefile test/skills/Makefile test/wip/Makefile ])

# Define extra output make files for the Enterprise Edition
AC_CONFIG_FILES([ modules/forecast/Makefile ])
AC_CONFIG_FILES([ test/forecast_1/Makefile test/forecast_2/Makefile test/forecast_3/Makefile test/forecast_4/Makefile test/forecast_5/Makefile test/forecast_6/Makefile])

# Generate all make files
AC_OUTPUT

# Byebye message
echo
echo "--------------------------------------------------------"
echo "Configuration is complete"
echo
echo "Run the following commands to compile and install:"
echo "  make "
echo "  make install"
echo
echo "--------------------------------------------------------"
